{"version":3,"sources":["ng://ngx-file-drop/src/lib/ngx-drop/upload-file.model.ts","ng://ngx-file-drop/src/lib/ngx-drop/upload-event.model.ts","ng://ngx-file-drop/src/lib/ngx-drop/file-drop.component.ts","ng://ngx-file-drop/src/lib/ngx-drop/file-drop.module.ts"],"names":["UploadFile","relativePath","fileEntry","this","UploadEvent","files","FileComponent","zone","renderer","_this","accept","dropZoneLabel","dropZoneClassName","contentClassName","showBrowseBtn","browseBtnClassName","browseBtnLabel","onFileDrop","EventEmitter","onFileOver","onFileLeave","isDraggingOverDropZone","globalDraggingInProgress","numOfActiveReadEntries","helperFormEl","fileInputPlaceholderEl","dropEventTimerSubscription","_disabled","globalDragStartListener","listen","evt","globalDragEndListener","Object","defineProperty","prototype","value","disabled","ngOnDestroy","unsubscribe","onDragOver","event","isDropzoneDisabled","emit","preventAndStop","onDragLeave","dropFiles","dataTransfer","dropEffect","items","checkFiles","onBrowseButtonClick","fileSelector","nativeElement","click","uploadFiles","target","resetFileInput","i","item","entry","this_1","canGetAsEntry","webkitGetAsEntry","isFile","toUpload","name","addToQueue","isDirectory","traverseFileTree","fakeFileEntry","file","callback","length","timer","subscribe","path","push","dirReader_1","createReader","entries_1","readEntries_1","readEntries","result","concat","toUpload_1","run","fileInputEl","fileInputContainerEl","parentElement","getHelperFormElement","getFileInputPlaceholderElement","insertBefore","appendChild","reset","removeChild","createElement","stopPropagation","preventDefault","Component","args","selector","template","NgZone","Renderer2","Input","Output","ViewChild","FileDropModule","NgModule","declarations","exports","imports","CommonModule","providers","bootstrap"],"mappings":"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","sourcesContent":["import { FileSystemEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\r\nexport class UploadFile {\r\n    constructor(\r\n        public relativePath: string,\r\n        public fileEntry: FileSystemEntry) {\r\n    }\r\n}\r\n","import { UploadFile } from './upload-file.model';\r\n\r\nexport class UploadEvent {\r\n    constructor(\r\n        public files: UploadFile[]) {\r\n    }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  NgZone,\r\n  OnDestroy,\r\n  Renderer2,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { timer, Subscription } from 'rxjs';\r\n\r\nimport { UploadFile } from './upload-file.model';\r\nimport { UploadEvent } from './upload-event.model';\r\nimport { FileSystemFileEntry, FileSystemEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n@Component({\r\n  selector: 'file-drop',\r\n  templateUrl: './file-drop.component.html',\r\n  styleUrls: ['./file-drop.component.scss'],\r\n})\r\nexport class FileComponent implements OnDestroy {\r\n\r\n  @Input()\r\n  public accept: string = '*';\r\n\r\n  @Input()\r\n  public dropZoneLabel: string = '';\r\n  /** @deprecated Will be removed in the next major version. Use `dropZoneLabel` instead. */\r\n  public get headertext(): string { return this.dropZoneLabel; }\r\n  /** @deprecated Will be removed in the next major version. Use `dropZoneLabel` instead. */\r\n  @Input()\r\n  public set headertext(value: string) {\r\n    this.dropZoneLabel = value;\r\n  }\r\n\r\n  @Input()\r\n  public dropZoneClassName: string = 'ngx-file-drop__drop-zone drop-zone';\r\n  /** @deprecated Will be removed in the next major version. Use `dropZoneClassName` instead. */\r\n  public get customstyle(): string { return this.dropZoneClassName; }\r\n  /** @deprecated Will be removed in the next major version. Use `dropZoneClassName` instead. */\r\n  @Input()\r\n  public set customstyle(value: string) {\r\n    this.dropZoneClassName = value;\r\n  }\r\n\r\n  @Input()\r\n  public contentClassName: string = 'ngx-file-drop__content content';\r\n  /** @deprecated Will be removed in the next major version. Use `contentClassName` instead. */\r\n  public get customContentStyle(): string { return this.contentClassName; }\r\n  /** @deprecated Will be removed in the next major version. Use `contentClassName` instead. */\r\n  @Input()\r\n  public set customContentStyle(value: string) {\r\n    this.contentClassName = value;\r\n  }\r\n\r\n  public get disabled(): boolean { return this._disabled; }\r\n  @Input()\r\n  public set disabled(value: boolean) {\r\n    this._disabled = (value != null && `${value}` !== 'false');\r\n  }\r\n  /** @deprecated Will be removed in the next major version. Use `disabled` instead. */\r\n  public get disableIf(): boolean { return this.disabled; }\r\n  /** @deprecated Will be removed in the next major version. Use `disabled` instead. */\r\n  @Input()\r\n  public set disableIf(value: boolean) {\r\n    this.disabled = value;\r\n  }\r\n\r\n  @Input()\r\n  public showBrowseBtn: boolean = false;\r\n  @Input()\r\n  public browseBtnClassName: string = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\r\n  /** @deprecated Will be removed in the next major version. Use `browseBtnClassName` instead. */\r\n  public get customBtnStyling(): string { return this.browseBtnClassName; }\r\n  /** @deprecated Will be removed in the next major version. Use `browseBtnClassName` instead. */\r\n  @Input()\r\n  public set customBtnStyling(value: string) {\r\n    this.browseBtnClassName = value;\r\n  }\r\n\r\n  @Input()\r\n  public browseBtnLabel: string = 'Browse files';\r\n\r\n  @Output()\r\n  public onFileDrop: EventEmitter<UploadEvent> = new EventEmitter<UploadEvent>();\r\n  @Output()\r\n  public onFileOver: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output()\r\n  public onFileLeave: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @ViewChild('fileSelector')\r\n  public fileSelector: ElementRef;\r\n\r\n  public isDraggingOverDropZone: boolean = false;\r\n\r\n  private globalDraggingInProgress: boolean = false;\r\n  private globalDragStartListener: () => void;\r\n  private globalDragEndListener: () => void;\r\n\r\n  private files: UploadFile[] = [];\r\n  private numOfActiveReadEntries: number = 0;\r\n\r\n  private helperFormEl: HTMLFormElement | null = null;\r\n  private fileInputPlaceholderEl: HTMLDivElement | null = null;\r\n\r\n  private dropEventTimerSubscription: Subscription | null = null;\r\n\r\n  private _disabled: boolean = false;\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private renderer: Renderer2\r\n  ) {\r\n    this.globalDragStartListener = this.renderer.listen('document', 'dragstart', (evt: Event) => {\r\n      this.globalDraggingInProgress = true;\r\n    });\r\n    this.globalDragEndListener = this.renderer.listen('document', 'dragend', (evt: Event) => {\r\n      this.globalDraggingInProgress = false;\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.dropEventTimerSubscription) {\r\n      this.dropEventTimerSubscription.unsubscribe();\r\n      this.dropEventTimerSubscription = null;\r\n    }\r\n    this.globalDragStartListener();\r\n    this.globalDragEndListener();\r\n    this.files = [];\r\n    this.helperFormEl = null;\r\n    this.fileInputPlaceholderEl = null;\r\n  }\r\n\r\n  public onDragOver(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (!this.isDraggingOverDropZone) {\r\n        this.isDraggingOverDropZone = true;\r\n        this.onFileOver.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public onDragLeave(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (this.isDraggingOverDropZone) {\r\n        this.isDraggingOverDropZone = false;\r\n        this.onFileLeave.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public dropFiles(event: DragEvent): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      this.isDraggingOverDropZone = false;\r\n      if (event.dataTransfer) {\r\n        event.dataTransfer.dropEffect = 'copy';\r\n        let items: FileList | DataTransferItemList;\r\n        if (event.dataTransfer.items) {\r\n          items = event.dataTransfer.items;\r\n        } else {\r\n          items = event.dataTransfer.files;\r\n        }\r\n        this.preventAndStop(event);\r\n        this.checkFiles(items);\r\n      }\r\n    }\r\n  }\r\n\r\n  public onBrowseButtonClick(event: MouseEvent): void {\r\n    if (this.fileSelector && this.fileSelector.nativeElement) {\r\n      (this.fileSelector.nativeElement as HTMLInputElement).click();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Processes the change event of the file input and adds the given files.\r\n   * @param Event event\r\n   */\r\n  public uploadFiles(event: Event): void {\r\n    if (!this.isDropzoneDisabled()) {\r\n      if (event.target) {\r\n        const items = (event.target as HTMLInputElement).files || ([] as any);\r\n        this.checkFiles(items);\r\n        this.resetFileInput();\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkFiles(items: FileList | DataTransferItemList): void {\r\n    for (let i = 0; i < items.length; i++) {\r\n      const item = items[i];\r\n      let entry: FileSystemEntry | null = null;\r\n      if (this.canGetAsEntry(item)) {\r\n        entry = item.webkitGetAsEntry();\r\n      }\r\n\r\n      if (!entry) {\r\n        if (item) {\r\n          const fakeFileEntry: FileSystemFileEntry = {\r\n            name: (item as File).name,\r\n            isDirectory: false,\r\n            isFile: true,\r\n            file: (callback: (filea: File) => void): void => {\r\n              callback(item as File);\r\n            },\r\n          };\r\n          const toUpload: UploadFile = new UploadFile(fakeFileEntry.name, fakeFileEntry);\r\n          this.addToQueue(toUpload);\r\n        }\r\n\r\n      } else {\r\n        if (entry.isFile) {\r\n          const toUpload: UploadFile = new UploadFile(entry.name, entry);\r\n          this.addToQueue(toUpload);\r\n\r\n        } else if (entry.isDirectory) {\r\n          this.traverseFileTree(entry, entry.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.dropEventTimerSubscription) {\r\n      this.dropEventTimerSubscription.unsubscribe();\r\n    }\r\n    this.dropEventTimerSubscription = timer(200, 200)\r\n      .subscribe(() => {\r\n        if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\r\n          this.onFileDrop.emit(new UploadEvent(this.files));\r\n          this.files = [];\r\n        }\r\n      });\r\n  }\r\n\r\n  private traverseFileTree(item: FileSystemEntry, path: string): void {\r\n    if (item.isFile) {\r\n      const toUpload: UploadFile = new UploadFile(path, item);\r\n      this.files.push(toUpload);\r\n\r\n    } else {\r\n      path = path + '/';\r\n      const dirReader = (item as FileSystemDirectoryEntry).createReader();\r\n      let entries: FileSystemEntry[] = [];\r\n\r\n      const readEntries = () => {\r\n        this.numOfActiveReadEntries++;\r\n        dirReader.readEntries((result) => {\r\n          if (!result.length) {\r\n            // add empty folders\r\n            if (entries.length === 0) {\r\n              const toUpload: UploadFile = new UploadFile(path, item);\r\n              this.zone.run(() => {\r\n                this.addToQueue(toUpload);\r\n              });\r\n\r\n            } else {\r\n              for (let i = 0; i < entries.length; i++) {\r\n                this.zone.run(() => {\r\n                  this.traverseFileTree(entries[i], path + entries[i].name);\r\n                });\r\n              }\r\n            }\r\n\r\n          } else {\r\n            // continue with the reading\r\n            entries = entries.concat(result);\r\n            readEntries();\r\n          }\r\n\r\n          this.numOfActiveReadEntries--;\r\n        });\r\n      };\r\n\r\n      readEntries();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n   */\r\n  private resetFileInput(): void {\r\n    if (this.fileSelector && this.fileSelector.nativeElement) {\r\n      const fileInputEl = this.fileSelector.nativeElement as HTMLInputElement;\r\n      const fileInputContainerEl = fileInputEl.parentElement;\r\n      const helperFormEl = this.getHelperFormElement();\r\n      const fileInputPlaceholderEl = this.getFileInputPlaceholderElement();\r\n\r\n      // Just a quick check so we do not mess up the DOM (will never happen though).\r\n      if (fileInputContainerEl !== helperFormEl) {\r\n        // Insert the form input placeholder in the DOM before the form input element.\r\n        this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);\r\n        // Add the form input as child of the temporary form element, removing the form input from the DOM.\r\n        this.renderer.appendChild(helperFormEl, fileInputEl);\r\n        // Reset the form, thus clearing the input element of any files.\r\n        helperFormEl.reset();\r\n        // Add the file input back to the DOM in place of the file input placeholder element.\r\n        this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);\r\n        // Remove the input placeholder from the DOM\r\n        this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a cached HTML form element as a helper element to clear the file input element.\r\n   */\r\n  private getHelperFormElement(): HTMLFormElement {\r\n    if (!this.helperFormEl) {\r\n      this.helperFormEl = this.renderer.createElement('form') as HTMLFormElement;\r\n    }\r\n\r\n    return this.helperFormEl;\r\n  }\r\n\r\n  /**\r\n   * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n   */\r\n  private getFileInputPlaceholderElement(): HTMLDivElement {\r\n    if (!this.fileInputPlaceholderEl) {\r\n      this.fileInputPlaceholderEl = this.renderer.createElement('div') as HTMLDivElement;\r\n    }\r\n\r\n    return this.fileInputPlaceholderEl;\r\n  }\r\n\r\n  private canGetAsEntry(item: any): item is DataTransferItem {\r\n    return !!item.webkitGetAsEntry;\r\n  }\r\n\r\n  private isDropzoneDisabled(): boolean {\r\n    return (this.globalDraggingInProgress || this.disabled);\r\n  }\r\n\r\n  private addToQueue(item: UploadFile): void {\r\n    this.files.push(item);\r\n  }\r\n\r\n  private preventAndStop(event: Event): void {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {FileComponent} from './file-drop.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FileComponent,\r\n  ],\r\n  exports: [FileComponent],\r\n  imports: [CommonModule],\r\n  providers: [],\r\n  bootstrap: [FileComponent],\r\n})\r\nexport class FileDropModule {}\r\n"]}