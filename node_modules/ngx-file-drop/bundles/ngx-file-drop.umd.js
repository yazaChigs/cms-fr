(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-file-drop', ['exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (factory((global['ngx-file-drop'] = {}),global.ng.core,global.rxjs,global.ng.common));
}(this, (function (exports,core,rxjs,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * fileEntry is an instance of {\@link FileSystemFileEntry} or {\@link FileSystemDirectoryEntry}.
     * Which one is it can be checked using {\@link FileSystemEntry.isFile} or {\@link FileSystemEntry.isDirectory}
     * properties of the given {\@link FileSystemEntry}.
     */
    var /**
     * fileEntry is an instance of {\@link FileSystemFileEntry} or {\@link FileSystemDirectoryEntry}.
     * Which one is it can be checked using {\@link FileSystemEntry.isFile} or {\@link FileSystemEntry.isDirectory}
     * properties of the given {\@link FileSystemEntry}.
     */ UploadFile = /** @class */ (function () {
        function UploadFile(relativePath, fileEntry) {
            this.relativePath = relativePath;
            this.fileEntry = fileEntry;
        }
        return UploadFile;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var UploadEvent = /** @class */ (function () {
        function UploadEvent(files) {
            this.files = files;
        }
        return UploadEvent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FileComponent = /** @class */ (function () {
        function FileComponent(zone, renderer) {
            var _this = this;
            this.zone = zone;
            this.renderer = renderer;
            this.accept = '*';
            this.dropZoneLabel = '';
            this.dropZoneClassName = 'ngx-file-drop__drop-zone drop-zone';
            this.contentClassName = 'ngx-file-drop__content content';
            this.showBrowseBtn = false;
            this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';
            this.browseBtnLabel = 'Browse files';
            this.onFileDrop = new core.EventEmitter();
            this.onFileOver = new core.EventEmitter();
            this.onFileLeave = new core.EventEmitter();
            this.isDraggingOverDropZone = false;
            this.globalDraggingInProgress = false;
            this.files = [];
            this.numOfActiveReadEntries = 0;
            this.helperFormEl = null;
            this.fileInputPlaceholderEl = null;
            this.dropEventTimerSubscription = null;
            this._disabled = false;
            this.globalDragStartListener = this.renderer.listen('document', 'dragstart', function (evt) {
                _this.globalDraggingInProgress = true;
            });
            this.globalDragEndListener = this.renderer.listen('document', 'dragend', function (evt) {
                _this.globalDraggingInProgress = false;
            });
        }
        Object.defineProperty(FileComponent.prototype, "headertext", {
            /** @deprecated Will be removed in the next major version. Use `dropZoneLabel` instead. */
            get: /**
             * @deprecated Will be removed in the next major version. Use `dropZoneLabel` instead.
             * @return {?}
             */ function () { return this.dropZoneLabel; },
            /** @deprecated Will be removed in the next major version. Use `dropZoneLabel` instead. */
            set: /**
             * @deprecated Will be removed in the next major version. Use `dropZoneLabel` instead.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.dropZoneLabel = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileComponent.prototype, "customstyle", {
            /** @deprecated Will be removed in the next major version. Use `dropZoneClassName` instead. */
            get: /**
             * @deprecated Will be removed in the next major version. Use `dropZoneClassName` instead.
             * @return {?}
             */ function () { return this.dropZoneClassName; },
            /** @deprecated Will be removed in the next major version. Use `dropZoneClassName` instead. */
            set: /**
             * @deprecated Will be removed in the next major version. Use `dropZoneClassName` instead.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.dropZoneClassName = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileComponent.prototype, "customContentStyle", {
            /** @deprecated Will be removed in the next major version. Use `contentClassName` instead. */
            get: /**
             * @deprecated Will be removed in the next major version. Use `contentClassName` instead.
             * @return {?}
             */ function () { return this.contentClassName; },
            /** @deprecated Will be removed in the next major version. Use `contentClassName` instead. */
            set: /**
             * @deprecated Will be removed in the next major version. Use `contentClassName` instead.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.contentClassName = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () { return this._disabled; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = (value != null && "" + value !== 'false');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileComponent.prototype, "disableIf", {
            /** @deprecated Will be removed in the next major version. Use `disabled` instead. */
            get: /**
             * @deprecated Will be removed in the next major version. Use `disabled` instead.
             * @return {?}
             */ function () { return this.disabled; },
            /** @deprecated Will be removed in the next major version. Use `disabled` instead. */
            set: /**
             * @deprecated Will be removed in the next major version. Use `disabled` instead.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.disabled = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileComponent.prototype, "customBtnStyling", {
            /** @deprecated Will be removed in the next major version. Use `browseBtnClassName` instead. */
            get: /**
             * @deprecated Will be removed in the next major version. Use `browseBtnClassName` instead.
             * @return {?}
             */ function () { return this.browseBtnClassName; },
            /** @deprecated Will be removed in the next major version. Use `browseBtnClassName` instead. */
            set: /**
             * @deprecated Will be removed in the next major version. Use `browseBtnClassName` instead.
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.browseBtnClassName = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FileComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.dropEventTimerSubscription) {
                    this.dropEventTimerSubscription.unsubscribe();
                    this.dropEventTimerSubscription = null;
                }
                this.globalDragStartListener();
                this.globalDragEndListener();
                this.files = [];
                this.helperFormEl = null;
                this.fileInputPlaceholderEl = null;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileComponent.prototype.onDragOver = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.isDropzoneDisabled()) {
                    if (!this.isDraggingOverDropZone) {
                        this.isDraggingOverDropZone = true;
                        this.onFileOver.emit(event);
                    }
                    this.preventAndStop(event);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileComponent.prototype.onDragLeave = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.isDropzoneDisabled()) {
                    if (this.isDraggingOverDropZone) {
                        this.isDraggingOverDropZone = false;
                        this.onFileLeave.emit(event);
                    }
                    this.preventAndStop(event);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileComponent.prototype.dropFiles = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.isDropzoneDisabled()) {
                    this.isDraggingOverDropZone = false;
                    if (event.dataTransfer) {
                        event.dataTransfer.dropEffect = 'copy';
                        /** @type {?} */
                        var items = void 0;
                        if (event.dataTransfer.items) {
                            items = event.dataTransfer.items;
                        }
                        else {
                            items = event.dataTransfer.files;
                        }
                        this.preventAndStop(event);
                        this.checkFiles(items);
                    }
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileComponent.prototype.onBrowseButtonClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.fileSelector && this.fileSelector.nativeElement) {
                    (( /** @type {?} */(this.fileSelector.nativeElement))).click();
                }
            };
        /**
         * Processes the change event of the file input and adds the given files.
         * @param Event event
         */
        /**
         * Processes the change event of the file input and adds the given files.
         * @param {?} event
         * @return {?}
         */
        FileComponent.prototype.uploadFiles = /**
         * Processes the change event of the file input and adds the given files.
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.isDropzoneDisabled()) {
                    if (event.target) {
                        /** @type {?} */
                        var items = (( /** @type {?} */(event.target))).files || (( /** @type {?} */([])));
                        this.checkFiles(items);
                        this.resetFileInput();
                    }
                }
            };
        /**
         * @param {?} items
         * @return {?}
         */
        FileComponent.prototype.checkFiles = /**
         * @param {?} items
         * @return {?}
         */
            function (items) {
                var _this = this;
                var _loop_1 = function (i) {
                    /** @type {?} */
                    var item = items[i];
                    /** @type {?} */
                    var entry = null;
                    if (this_1.canGetAsEntry(item)) {
                        entry = item.webkitGetAsEntry();
                    }
                    if (!entry) {
                        if (item) {
                            /** @type {?} */
                            var fakeFileEntry = {
                                name: (( /** @type {?} */(item))).name,
                                isDirectory: false,
                                isFile: true,
                                file: function (callback) {
                                    callback(( /** @type {?} */(item)));
                                },
                            };
                            /** @type {?} */
                            var toUpload = new UploadFile(fakeFileEntry.name, fakeFileEntry);
                            this_1.addToQueue(toUpload);
                        }
                    }
                    else {
                        if (entry.isFile) {
                            /** @type {?} */
                            var toUpload = new UploadFile(entry.name, entry);
                            this_1.addToQueue(toUpload);
                        }
                        else if (entry.isDirectory) {
                            this_1.traverseFileTree(entry, entry.name);
                        }
                    }
                };
                var this_1 = this;
                for (var i = 0; i < items.length; i++) {
                    _loop_1(i);
                }
                if (this.dropEventTimerSubscription) {
                    this.dropEventTimerSubscription.unsubscribe();
                }
                this.dropEventTimerSubscription = rxjs.timer(200, 200)
                    .subscribe(function () {
                    if (_this.files.length > 0 && _this.numOfActiveReadEntries === 0) {
                        _this.onFileDrop.emit(new UploadEvent(_this.files));
                        _this.files = [];
                    }
                });
            };
        /**
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
        FileComponent.prototype.traverseFileTree = /**
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
            function (item, path) {
                var _this = this;
                if (item.isFile) {
                    /** @type {?} */
                    var toUpload = new UploadFile(path, item);
                    this.files.push(toUpload);
                }
                else {
                    path = path + '/';
                    /** @type {?} */
                    var dirReader_1 = (( /** @type {?} */(item))).createReader();
                    /** @type {?} */
                    var entries_1 = [];
                    /** @type {?} */
                    var readEntries_1 = function () {
                        _this.numOfActiveReadEntries++;
                        dirReader_1.readEntries(function (result) {
                            if (!result.length) {
                                // add empty folders
                                if (entries_1.length === 0) {
                                    /** @type {?} */
                                    var toUpload_1 = new UploadFile(path, item);
                                    _this.zone.run(function () {
                                        _this.addToQueue(toUpload_1);
                                    });
                                }
                                else {
                                    var _loop_2 = function (i) {
                                        _this.zone.run(function () {
                                            _this.traverseFileTree(entries_1[i], path + entries_1[i].name);
                                        });
                                    };
                                    for (var i = 0; i < entries_1.length; i++) {
                                        _loop_2(i);
                                    }
                                }
                            }
                            else {
                                // continue with the reading
                                entries_1 = entries_1.concat(result);
                                readEntries_1();
                            }
                            _this.numOfActiveReadEntries--;
                        });
                    };
                    readEntries_1();
                }
            };
        /**
         * Clears any added files from the file input element so the same file can subsequently be added multiple times.
         */
        /**
         * Clears any added files from the file input element so the same file can subsequently be added multiple times.
         * @return {?}
         */
        FileComponent.prototype.resetFileInput = /**
         * Clears any added files from the file input element so the same file can subsequently be added multiple times.
         * @return {?}
         */
            function () {
                if (this.fileSelector && this.fileSelector.nativeElement) {
                    /** @type {?} */
                    var fileInputEl = ( /** @type {?} */(this.fileSelector.nativeElement));
                    /** @type {?} */
                    var fileInputContainerEl = fileInputEl.parentElement;
                    /** @type {?} */
                    var helperFormEl = this.getHelperFormElement();
                    /** @type {?} */
                    var fileInputPlaceholderEl = this.getFileInputPlaceholderElement();
                    // Just a quick check so we do not mess up the DOM (will never happen though).
                    if (fileInputContainerEl !== helperFormEl) {
                        // Insert the form input placeholder in the DOM before the form input element.
                        this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);
                        // Add the form input as child of the temporary form element, removing the form input from the DOM.
                        this.renderer.appendChild(helperFormEl, fileInputEl);
                        // Reset the form, thus clearing the input element of any files.
                        helperFormEl.reset();
                        // Add the file input back to the DOM in place of the file input placeholder element.
                        this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);
                        // Remove the input placeholder from the DOM
                        this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);
                    }
                }
            };
        /**
         * Get a cached HTML form element as a helper element to clear the file input element.
         */
        /**
         * Get a cached HTML form element as a helper element to clear the file input element.
         * @return {?}
         */
        FileComponent.prototype.getHelperFormElement = /**
         * Get a cached HTML form element as a helper element to clear the file input element.
         * @return {?}
         */
            function () {
                if (!this.helperFormEl) {
                    this.helperFormEl = ( /** @type {?} */(this.renderer.createElement('form')));
                }
                return this.helperFormEl;
            };
        /**
         * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.
         */
        /**
         * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.
         * @return {?}
         */
        FileComponent.prototype.getFileInputPlaceholderElement = /**
         * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.
         * @return {?}
         */
            function () {
                if (!this.fileInputPlaceholderEl) {
                    this.fileInputPlaceholderEl = ( /** @type {?} */(this.renderer.createElement('div')));
                }
                return this.fileInputPlaceholderEl;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FileComponent.prototype.canGetAsEntry = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return !!item.webkitGetAsEntry;
            };
        /**
         * @return {?}
         */
        FileComponent.prototype.isDropzoneDisabled = /**
         * @return {?}
         */
            function () {
                return (this.globalDraggingInProgress || this.disabled);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FileComponent.prototype.addToQueue = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.files.push(item);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileComponent.prototype.preventAndStop = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.stopPropagation();
                event.preventDefault();
            };
        FileComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'file-drop',
                        template: "<div [className]=\"dropZoneClassName\"\r\n     [class.over]=\"isDraggingOverDropZone\"\r\n     [class.ngx-file-drop__drop-zone--over]=\"isDraggingOverDropZone\"\r\n     (drop)=\"dropFiles($event)\"\r\n     (dragover)=\"onDragOver($event)\"\r\n     (dragleave)=\"onDragLeave($event)\">\r\n    <div [className]=\"contentClassName\">\r\n        <ng-content></ng-content>\r\n        <div *ngIf=\"dropZoneLabel\" class=\"ngx-file-drop__drop-zone-label\">{{dropZoneLabel}}</div>\r\n        <div *ngIf=\"showBrowseBtn\">\r\n            <input type=\"file\" #fileSelector [accept]=\"accept\" (change)=\"uploadFiles($event)\" multiple class=\"ngx-file-drop__file-input\" />\r\n            <input type=\"button\" [className]=\"browseBtnClassName\" value=\"{{browseBtnLabel}}\" (click)=\"onBrowseButtonClick($event)\" />\r\n        </div>\r\n    </div>\r\n</div>\r\n",
                        styles: [".drop-zone{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.over{background-color:rgba(147,147,147,.5)}.content{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}"]
                    }] }
        ];
        /** @nocollapse */
        FileComponent.ctorParameters = function () {
            return [
                { type: core.NgZone },
                { type: core.Renderer2 }
            ];
        };
        FileComponent.propDecorators = {
            accept: [{ type: core.Input }],
            dropZoneLabel: [{ type: core.Input }],
            headertext: [{ type: core.Input }],
            dropZoneClassName: [{ type: core.Input }],
            customstyle: [{ type: core.Input }],
            contentClassName: [{ type: core.Input }],
            customContentStyle: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            disableIf: [{ type: core.Input }],
            showBrowseBtn: [{ type: core.Input }],
            browseBtnClassName: [{ type: core.Input }],
            customBtnStyling: [{ type: core.Input }],
            browseBtnLabel: [{ type: core.Input }],
            onFileDrop: [{ type: core.Output }],
            onFileOver: [{ type: core.Output }],
            onFileLeave: [{ type: core.Output }],
            fileSelector: [{ type: core.ViewChild, args: ['fileSelector',] }]
        };
        return FileComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FileDropModule = /** @class */ (function () {
        function FileDropModule() {
        }
        FileDropModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            FileComponent,
                        ],
                        exports: [FileComponent],
                        imports: [common.CommonModule],
                        providers: [],
                        bootstrap: [FileComponent],
                    },] }
        ];
        return FileDropModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.FileComponent = FileComponent;
    exports.FileDropModule = FileDropModule;
    exports.UploadFile = UploadFile;
    exports.UploadEvent = UploadEvent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,