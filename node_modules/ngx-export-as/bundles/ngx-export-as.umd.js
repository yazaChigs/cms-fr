(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('html2canvas'), require('xlsx'), require('html2pdf.js')) :
    typeof define === 'function' && define.amd ? define('ngx-export-as', ['exports', '@angular/core', 'rxjs', 'html2canvas', 'xlsx', 'html2pdf.js'], factory) :
    (global = global || self, factory(global['ngx-export-as'] = {}, global.ng.core, global.rxjs, global.html2canvas, global.xlsx, global.html2pdf));
}(this, (function (exports, core, rxjs, html2canvas, xlsx, html2pdf) { 'use strict';

    html2canvas = html2canvas && Object.prototype.hasOwnProperty.call(html2canvas, 'default') ? html2canvas['default'] : html2canvas;
    html2pdf = html2pdf && Object.prototype.hasOwnProperty.call(html2pdf, 'default') ? html2pdf['default'] : html2pdf;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    window['html2canvas'] = html2canvas;
    var ExportAsService = /** @class */ (function () {
        function ExportAsService() {
        }
        /**
         * Main base64 get method, it will return the file as base64 string
         * @param config your config
         */
        ExportAsService.prototype.get = function (config) {
            // structure method name dynamically by type
            var func = 'get' + config.type.toUpperCase();
            // if type supported execute and return
            if (this[func]) {
                return this[func](config);
            }
            // throw error for unsupported formats
            return rxjs.Observable.create(function (observer) { observer.error('Export type is not supported.'); });
        };
        /**
         * Save exported file in old javascript way
         * @param config your custom config
         * @param fileName Name of the file to be saved as
         */
        ExportAsService.prototype.save = function (config, fileName) {
            // set download
            config.download = true;
            // get file name with type
            config.fileName = fileName + '.' + config.type;
            return this.get(config);
        };
        /**
         * Converts content string to blob object
         * @param content string to be converted
         */
        ExportAsService.prototype.contentToBlob = function (content) {
            return rxjs.Observable.create(function (observer) {
                // get content string and extract mime type
                var arr = content.split(','), mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]);
                var n = bstr.length;
                var u8arr = new Uint8Array(n);
                while (n--) {
                    u8arr[n] = bstr.charCodeAt(n);
                }
                observer.next(new Blob([u8arr], { type: mime }));
                observer.complete();
            });
        };
        /**
         * Removes base64 file type from a string like "data:text/csv;base64,"
         * @param fileContent the base64 string to remove the type from
         */
        ExportAsService.prototype.removeFileTypeFromBase64 = function (fileContent) {
            var re = /^data:[^]*;base64,/g;
            var newContent = re[Symbol.replace](fileContent, '');
            return newContent;
        };
        /**
         * Structure the base64 file content with the file type string
         * @param fileContent file content
         * @param fileMime file mime type "text/csv"
         */
        ExportAsService.prototype.addFileTypeToBase64 = function (fileContent, fileMime) {
            return "data:" + fileMime + ";base64," + fileContent;
        };
        /**
         * create downloadable file from dataURL
         * @param fileName downloadable file name
         * @param dataURL file content as dataURL
         */
        ExportAsService.prototype.downloadFromDataURL = function (fileName, dataURL) {
            var _this = this;
            // create blob
            this.contentToBlob(dataURL).subscribe(function (blob) {
                // download the blob
                _this.downloadFromBlob(blob, fileName);
            });
        };
        /**
         * Downloads the blob object as a file
         * @param blob file object as blob
         * @param fileName downloadable file name
         */
        ExportAsService.prototype.downloadFromBlob = function (blob, fileName) {
            // get object url
            var url = window.URL.createObjectURL(blob);
            // check for microsoft internet explorer
            if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                // use IE download or open if the user using IE
                window.navigator.msSaveOrOpenBlob(blob, fileName);
            }
            else {
                // if not using IE then create link element
                var element = document.createElement('a');
                // set download attr with file name
                element.setAttribute('download', fileName);
                // set the element as hidden
                element.style.display = 'none';
                // append the body
                document.body.appendChild(element);
                // set href attr
                element.href = url;
                // click on it to start downloading
                element.click();
                // remove the link from the dom
                document.body.removeChild(element);
            }
        };
        ExportAsService.prototype.getPDF = function (config) {
            var _this = this;
            return rxjs.Observable.create(function (observer) {
                if (!config.options) {
                    config.options = {};
                }
                config.options.filename = config.fileName;
                var element = document.getElementById(config.elementIdOrContent);
                var pdf = html2pdf().set(config.options).from(element ? element : config.elementIdOrContent);
                var download = config.download;
                var pdfCallbackFn = config.options.pdfCallbackFn;
                if (download) {
                    if (pdfCallbackFn) {
                        _this.applyPdfCallbackFn(pdf, pdfCallbackFn).save();
                    }
                    else {
                        pdf.save();
                    }
                    observer.next();
                    observer.complete();
                }
                else {
                    if (pdfCallbackFn) {
                        _this.applyPdfCallbackFn(pdf, pdfCallbackFn).outputPdf('datauristring').then(function (data) {
                            observer.next(data);
                            observer.complete();
                        });
                    }
                    else {
                        pdf.outputPdf('datauristring').then(function (data) {
                            observer.next(data);
                            observer.complete();
                        });
                    }
                }
            });
        };
        ExportAsService.prototype.applyPdfCallbackFn = function (pdf, pdfCallbackFn) {
            return pdf.toPdf().get('pdf').then(function (pdfRef) {
                pdfCallbackFn(pdfRef);
            });
        };
        ExportAsService.prototype.getPNG = function (config) {
            var _this = this;
            return rxjs.Observable.create(function (observer) {
                var element = document.getElementById(config.elementIdOrContent);
                html2canvas(element, config.options).then(function (canvas) {
                    var imgData = canvas.toDataURL('image/PNG');
                    if (config.type === 'png' && config.download) {
                        _this.downloadFromDataURL(config.fileName, imgData);
                        observer.next();
                    }
                    else {
                        observer.next(imgData);
                    }
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                });
            });
        };
        ExportAsService.prototype.getCSV = function (config) {
            var _this = this;
            return rxjs.Observable.create(function (observer) {
                var element = document.getElementById(config.elementIdOrContent);
                var csv = [];
                var rows = element.querySelectorAll('table tr');
                for (var index = 0; index < rows.length; index++) {
                    var rowElement = rows[index];
                    var row = [];
                    var cols = rowElement.querySelectorAll('td, th');
                    for (var colIndex = 0; colIndex < cols.length; colIndex++) {
                        var col = cols[colIndex];
                        row.push(col.innerText);
                    }
                    csv.push(row.join(','));
                }
                var csvContent = 'data:text/csv;base64,' + _this.btoa(csv.join('\n'));
                if (config.download) {
                    _this.downloadFromDataURL(config.fileName, csvContent);
                    observer.next();
                }
                else {
                    observer.next(csvContent);
                }
                observer.complete();
            });
        };
        ExportAsService.prototype.getTXT = function (config) {
            var nameFrags = config.fileName.split('.');
            config.fileName = nameFrags[0] + ".txt";
            return this.getCSV(config);
        };
        ExportAsService.prototype.getXLS = function (config) {
            var _this = this;
            return rxjs.Observable.create(function (observer) {
                var element = document.getElementById(config.elementIdOrContent);
                var ws3 = xlsx.utils.table_to_sheet(element, config.options);
                var wb = xlsx.utils.book_new();
                xlsx.utils.book_append_sheet(wb, ws3, config.fileName);
                var out = xlsx.write(wb, { type: 'base64' });
                var xlsContent = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + out;
                if (config.download) {
                    _this.downloadFromDataURL(config.fileName, xlsContent);
                    observer.next();
                }
                else {
                    observer.next(xlsContent);
                }
                observer.complete();
            });
        };
        ExportAsService.prototype.getXLSX = function (config) {
            return this.getXLS(config);
        };
        // private getDOCX(config: ExportAsConfig): Observable<string | null> {
        //   return Observable.create((observer) => {
        //     const contentDocument: string = document.getElementById(config.elementIdOrContent).outerHTML;
        //     const content = '<!DOCTYPE html>' + contentDocument;
        //     const converted = htmlDocx.asBlob(content, config.options);
        //     if (config.download) {
        //       this.downloadFromBlob(converted, config.fileName);
        //       observer.next();
        //       observer.complete();
        //     } else {
        //       const reader = new FileReader();
        //       reader.onloadend = () => {
        //         const base64data = reader.result;
        //         observer.next(base64data);
        //         observer.complete();
        //       };
        //       reader.readAsDataURL(converted);
        //     }
        //   });
        // }
        // private getDOC(config: ExportAsConfig): Observable<string | null> {
        //   return this.getDOCX(config);
        // }
        ExportAsService.prototype.getJSON = function (config) {
            var _this = this;
            return rxjs.Observable.create(function (observer) {
                var data = []; // first row needs to be headers
                var headers = [];
                var table = document.getElementById(config.elementIdOrContent);
                for (var index = 0; index < table.rows[0].cells.length; index++) {
                    headers[index] = table.rows[0].cells[index].innerHTML.toLowerCase().replace(/ /gi, '');
                }
                // go through cells
                for (var i = 1; i < table.rows.length; i++) {
                    var tableRow = table.rows[i];
                    var rowData = {};
                    for (var j = 0; j < tableRow.cells.length; j++) {
                        rowData[headers[j]] = tableRow.cells[j].innerHTML;
                    }
                    data.push(rowData);
                }
                var jsonString = JSON.stringify(data);
                var jsonBase64 = _this.btoa(jsonString);
                var dataStr = 'data:text/json;base64,' + jsonBase64;
                if (config.download) {
                    _this.downloadFromDataURL(config.fileName, dataStr);
                    observer.next();
                }
                else {
                    observer.next(data);
                }
                observer.complete();
            });
        };
        ExportAsService.prototype.getXML = function (config) {
            var _this = this;
            return rxjs.Observable.create(function (observer) {
                var xml = '<?xml version="1.0" encoding="UTF-8"?><Root><Classes>';
                var tritem = document.getElementById(config.elementIdOrContent).getElementsByTagName('tr');
                for (var i = 0; i < tritem.length; i++) {
                    var celldata = tritem[i];
                    if (celldata.cells.length > 0) {
                        xml += '<Class name="' + celldata.cells[0].textContent + '">\n';
                        for (var m = 1; m < celldata.cells.length; ++m) {
                            xml += '\t<data>' + celldata.cells[m].textContent + '</data>\n';
                        }
                        xml += '</Class>\n';
                    }
                }
                xml += '</Classes></Root>';
                var base64 = 'data:text/xml;base64,' + _this.btoa(xml);
                if (config.download) {
                    _this.downloadFromDataURL(config.fileName, base64);
                    observer.next();
                }
                else {
                    observer.next(base64);
                }
                observer.complete();
            });
        };
        ExportAsService.prototype.btoa = function (content) {
            return btoa(unescape(encodeURIComponent(content)));
        };
        ExportAsService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], ExportAsService);
        return ExportAsService;
    }());

    var ExportAsModule = /** @class */ (function () {
        function ExportAsModule() {
        }
        ExportAsModule = __decorate([
            core.NgModule({
                providers: [ExportAsService],
            })
        ], ExportAsModule);
        return ExportAsModule;
    }());

    exports.ExportAsModule = ExportAsModule;
    exports.ExportAsService = ExportAsService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-export-as.umd.js.map
