{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-export-as/lib/export-as.service.ts","ng://ngx-export-as/lib/export-as.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","window","html2canvas","ExportAsService","prototype","get","config","func","type","toUpperCase","this","Observable","create","observer","error","save","fileName","download","contentToBlob","content","arr","split","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","next","Blob","complete","removeFileTypeFromBase64","fileContent","Symbol","replace","addFileTypeToBase64","fileMime","downloadFromDataURL","dataURL","_this","subscribe","blob","downloadFromBlob","url","URL","createObjectURL","navigator","msSaveOrOpenBlob","element","document","createElement","setAttribute","style","display","body","appendChild","href","click","removeChild","getPDF","options","filename","getElementById","elementIdOrContent","pdf","html2pdf","set","from","pdfCallbackFn","applyPdfCallbackFn","outputPdf","then","data","toPdf","pdfRef","getPNG","canvas","imgData","toDataURL","err","getCSV","csv","rows","querySelectorAll","index","row","cols","colIndex","col","push","innerText","join","csvContent","btoa","getTXT","nameFrags","getXLS","ws3","XLSX.utils","table_to_sheet","wb","book_new","book_append_sheet","xlsContent","XLSX.write","getXLSX","getJSON","headers","table","cells","innerHTML","toLowerCase","tableRow","rowData","j","jsonString","JSON","stringify","dataStr","getXML","xml","tritem","getElementsByTagName","celldata","textContent","m","base64","unescape","encodeURIComponent","Injectable","ExportAsModule","NgModule","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ExportAsConfig } from './export-as-config.model';\r\n\r\nimport html2canvas from 'html2canvas';\r\nimport * as XLSX from 'xlsx';\r\n// import * as htmlDocx from 'html-docx-js/dist/html-docx';\r\nimport html2pdf from 'html2pdf.js';\r\n\r\nwindow['html2canvas'] = html2canvas;\r\n\r\n@Injectable()\r\nexport class ExportAsService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Main base64 get method, it will return the file as base64 string\r\n   * @param config your config\r\n   */\r\n  get(config: ExportAsConfig): Observable<string | null> {\r\n    // structure method name dynamically by type\r\n    const func = 'get' + config.type.toUpperCase();\r\n    // if type supported execute and return\r\n    if (this[func]) {\r\n      return this[func](config);\r\n    }\r\n\r\n    // throw error for unsupported formats\r\n    return Observable.create((observer) => { observer.error('Export type is not supported.'); });\r\n  }\r\n\r\n  /**\r\n   * Save exported file in old javascript way\r\n   * @param config your custom config\r\n   * @param fileName Name of the file to be saved as\r\n   */\r\n  save(config: ExportAsConfig, fileName: string): Observable<string | null> {\r\n    // set download\r\n    config.download = true;\r\n    // get file name with type\r\n    config.fileName = fileName + '.' + config.type;\r\n    return this.get(config);\r\n  }\r\n\r\n  /**\r\n   * Converts content string to blob object\r\n   * @param content string to be converted\r\n   */\r\n  contentToBlob(content: string): Observable<Blob> {\r\n    return Observable.create((observer) => {\r\n      // get content string and extract mime type\r\n      const arr = content.split(','), mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[1]);\r\n      let n = bstr.length;\r\n      const u8arr = new Uint8Array(n);\r\n      while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n      }\r\n      observer.next(new Blob([u8arr], { type: mime }));\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes base64 file type from a string like \"data:text/csv;base64,\"\r\n   * @param fileContent the base64 string to remove the type from\r\n   */\r\n  removeFileTypeFromBase64(fileContent: string): string {\r\n    const re = /^data:[^]*;base64,/g;\r\n    const newContent: string = re[Symbol.replace](fileContent, '');\r\n    return newContent;\r\n  }\r\n\r\n  /**\r\n   * Structure the base64 file content with the file type string\r\n   * @param fileContent file content\r\n   * @param fileMime file mime type \"text/csv\"\r\n   */\r\n  addFileTypeToBase64(fileContent: string, fileMime: string): string {\r\n    return `data:${fileMime};base64,${fileContent}`;\r\n  }\r\n\r\n  /**\r\n   * create downloadable file from dataURL\r\n   * @param fileName downloadable file name\r\n   * @param dataURL file content as dataURL\r\n   */\r\n  downloadFromDataURL(fileName: string, dataURL: string): void {\r\n    // create blob\r\n    this.contentToBlob(dataURL).subscribe(blob => {\r\n      // download the blob\r\n      this.downloadFromBlob(blob, fileName);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Downloads the blob object as a file\r\n   * @param blob file object as blob\r\n   * @param fileName downloadable file name\r\n   */\r\n  downloadFromBlob(blob: Blob, fileName: string) {\r\n    // get object url\r\n    const url = window.URL.createObjectURL(blob);\r\n    // check for microsoft internet explorer\r\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n      // use IE download or open if the user using IE\r\n      window.navigator.msSaveOrOpenBlob(blob, fileName);\r\n    } else {\r\n      // if not using IE then create link element\r\n      const element = document.createElement('a');\r\n      // set download attr with file name\r\n      element.setAttribute('download', fileName);\r\n      // set the element as hidden\r\n      element.style.display = 'none';\r\n      // append the body\r\n      document.body.appendChild(element);\r\n      // set href attr\r\n      element.href = url;\r\n      // click on it to start downloading\r\n      element.click();\r\n      // remove the link from the dom\r\n      document.body.removeChild(element);\r\n    }\r\n  }\r\n\r\n  private getPDF(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      if (!config.options) {\r\n        config.options = {};\r\n      }\r\n      config.options.filename = config.fileName;\r\n      const element: HTMLElement = document.getElementById(config.elementIdOrContent);\r\n      const pdf = html2pdf().set(config.options).from(element ? element : config.elementIdOrContent);\r\n\r\n      const download = config.download;\r\n      const pdfCallbackFn = config.options.pdfCallbackFn;\r\n      if (download) {\r\n        if (pdfCallbackFn) {\r\n          this.applyPdfCallbackFn(pdf, pdfCallbackFn).save();\r\n        } else {\r\n          pdf.save();\r\n        }\r\n        observer.next();\r\n        observer.complete();\r\n      } else {\r\n        if (pdfCallbackFn) {\r\n          this.applyPdfCallbackFn(pdf, pdfCallbackFn).outputPdf('datauristring').then(data => {\r\n            observer.next(data);\r\n            observer.complete();\r\n          });\r\n        } else {\r\n          pdf.outputPdf('datauristring').then(data => {\r\n            observer.next(data);\r\n            observer.complete();\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private applyPdfCallbackFn(pdf, pdfCallbackFn) {\r\n    return pdf.toPdf().get('pdf').then((pdfRef) => {\r\n      pdfCallbackFn(pdfRef);\r\n    });\r\n  }\r\n\r\n  private getPNG(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      const element: HTMLElement = document.getElementById(config.elementIdOrContent);\r\n      html2canvas(element, config.options).then((canvas) => {\r\n        const imgData = canvas.toDataURL('image/PNG');\r\n        if (config.type === 'png' && config.download) {\r\n          this.downloadFromDataURL(config.fileName, imgData);\r\n          observer.next();\r\n        } else {\r\n          observer.next(imgData);\r\n        }\r\n        observer.complete();\r\n      }, err => {\r\n        observer.error(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  private getCSV(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      const element: HTMLElement = document.getElementById(config.elementIdOrContent);\r\n      const csv = [];\r\n      const rows: any = element.querySelectorAll('table tr');\r\n      for (let index = 0; index < rows.length; index++) {\r\n        const rowElement = rows[index];\r\n        const row = [];\r\n        const cols = rowElement.querySelectorAll('td, th');\r\n        for (let colIndex = 0; colIndex < cols.length; colIndex++) {\r\n          const col = cols[colIndex];\r\n          row.push(col.innerText);\r\n        }\r\n        csv.push(row.join(','));\r\n      }\r\n      const csvContent = 'data:text/csv;base64,' + this.btoa(csv.join('\\n'));\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, csvContent);\r\n        observer.next();\r\n      } else {\r\n        observer.next(csvContent);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private getTXT(config: ExportAsConfig): Observable<string | null> {\r\n    const nameFrags = config.fileName.split('.');\r\n    config.fileName = `${nameFrags[0]}.txt`;\r\n    return this.getCSV(config);\r\n  }\r\n\r\n  private getXLS(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n\r\n      const element: HTMLElement = document.getElementById(config.elementIdOrContent);\r\n      const ws3 = XLSX.utils.table_to_sheet(element, config.options);\r\n      const wb = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(wb, ws3, config.fileName);\r\n      const out = XLSX.write(wb, { type: 'base64' });\r\n      const xlsContent = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + out;\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, xlsContent);\r\n        observer.next();\r\n      } else {\r\n        observer.next(xlsContent);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private getXLSX(config: ExportAsConfig): Observable<string | null> {\r\n    return this.getXLS(config);\r\n  }\r\n\r\n  // private getDOCX(config: ExportAsConfig): Observable<string | null> {\r\n  //   return Observable.create((observer) => {\r\n  //     const contentDocument: string = document.getElementById(config.elementIdOrContent).outerHTML;\r\n  //     const content = '<!DOCTYPE html>' + contentDocument;\r\n  //     const converted = htmlDocx.asBlob(content, config.options);\r\n  //     if (config.download) {\r\n  //       this.downloadFromBlob(converted, config.fileName);\r\n  //       observer.next();\r\n  //       observer.complete();\r\n  //     } else {\r\n  //       const reader = new FileReader();\r\n  //       reader.onloadend = () => {\r\n  //         const base64data = reader.result;\r\n  //         observer.next(base64data);\r\n  //         observer.complete();\r\n  //       };\r\n  //       reader.readAsDataURL(converted);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // private getDOC(config: ExportAsConfig): Observable<string | null> {\r\n  //   return this.getDOCX(config);\r\n  // }\r\n\r\n  private getJSON(config: ExportAsConfig): Observable<any[] | null> {\r\n    return Observable.create((observer) => {\r\n      const data = []; // first row needs to be headers\r\n      const headers = [];\r\n      const table = <HTMLTableElement>document.getElementById(config.elementIdOrContent);\r\n      for (let index = 0; index < table.rows[0].cells.length; index++) {\r\n        headers[index] = table.rows[0].cells[index].innerHTML.toLowerCase().replace(/ /gi, '');\r\n      }\r\n      // go through cells\r\n      for (let i = 1; i < table.rows.length; i++) {\r\n        const tableRow = table.rows[i]; const rowData = {};\r\n        for (let j = 0; j < tableRow.cells.length; j++) {\r\n          rowData[headers[j]] = tableRow.cells[j].innerHTML;\r\n        }\r\n        data.push(rowData);\r\n      }\r\n      const jsonString = JSON.stringify(data);\r\n      const jsonBase64 = this.btoa(jsonString);\r\n      const dataStr = 'data:text/json;base64,' + jsonBase64;\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, dataStr);\r\n        observer.next();\r\n      } else {\r\n        observer.next(data);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private getXML(config: ExportAsConfig): Observable<string | null> {\r\n    return Observable.create((observer) => {\r\n      let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><Root><Classes>';\r\n      const tritem = document.getElementById(config.elementIdOrContent).getElementsByTagName('tr');\r\n      for (let i = 0; i < tritem.length; i++) {\r\n        const celldata = tritem[i];\r\n        if (celldata.cells.length > 0) {\r\n          xml += '<Class name=\"' + celldata.cells[0].textContent + '\">\\n';\r\n          for (let m = 1; m < celldata.cells.length; ++m) {\r\n            xml += '\\t<data>' + celldata.cells[m].textContent + '</data>\\n';\r\n          }\r\n          xml += '</Class>\\n';\r\n        }\r\n      }\r\n      xml += '</Classes></Root>';\r\n      const base64 = 'data:text/xml;base64,' + this.btoa(xml);\r\n      if (config.download) {\r\n        this.downloadFromDataURL(config.fileName, base64);\r\n        observer.next();\r\n      } else {\r\n        observer.next(base64);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n\r\n  private btoa(content: string) {\r\n    return btoa(unescape(encodeURIComponent(content)));\r\n  }\r\n\r\n}\r\n","/**\n * angular imports\n */\nimport { NgModule } from '@angular/core';\n\n/**\n * my imports\n */\nimport { ExportAsService } from './export-as.service';\n\n@NgModule({\n  providers: [ExportAsService],\n})\nexport class ExportAsModule { }\n\n\n"]}