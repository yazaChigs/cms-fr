import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import html2canvas from 'html2canvas';
import * as XLSX from 'xlsx';
// import * as htmlDocx from 'html-docx-js/dist/html-docx';
import html2pdf from 'html2pdf.js';
window['html2canvas'] = html2canvas;
var ExportAsService = /** @class */ (function () {
    function ExportAsService() {
    }
    /**
     * Main base64 get method, it will return the file as base64 string
     * @param config your config
     */
    ExportAsService.prototype.get = function (config) {
        // structure method name dynamically by type
        var func = 'get' + config.type.toUpperCase();
        // if type supported execute and return
        if (this[func]) {
            return this[func](config);
        }
        // throw error for unsupported formats
        return Observable.create(function (observer) { observer.error('Export type is not supported.'); });
    };
    /**
     * Save exported file in old javascript way
     * @param config your custom config
     * @param fileName Name of the file to be saved as
     */
    ExportAsService.prototype.save = function (config, fileName) {
        // set download
        config.download = true;
        // get file name with type
        config.fileName = fileName + '.' + config.type;
        return this.get(config);
    };
    /**
     * Converts content string to blob object
     * @param content string to be converted
     */
    ExportAsService.prototype.contentToBlob = function (content) {
        return Observable.create(function (observer) {
            // get content string and extract mime type
            var arr = content.split(','), mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]);
            var n = bstr.length;
            var u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            observer.next(new Blob([u8arr], { type: mime }));
            observer.complete();
        });
    };
    /**
     * Removes base64 file type from a string like "data:text/csv;base64,"
     * @param fileContent the base64 string to remove the type from
     */
    ExportAsService.prototype.removeFileTypeFromBase64 = function (fileContent) {
        var re = /^data:[^]*;base64,/g;
        var newContent = re[Symbol.replace](fileContent, '');
        return newContent;
    };
    /**
     * Structure the base64 file content with the file type string
     * @param fileContent file content
     * @param fileMime file mime type "text/csv"
     */
    ExportAsService.prototype.addFileTypeToBase64 = function (fileContent, fileMime) {
        return "data:" + fileMime + ";base64," + fileContent;
    };
    /**
     * create downloadable file from dataURL
     * @param fileName downloadable file name
     * @param dataURL file content as dataURL
     */
    ExportAsService.prototype.downloadFromDataURL = function (fileName, dataURL) {
        var _this = this;
        // create blob
        this.contentToBlob(dataURL).subscribe(function (blob) {
            // download the blob
            _this.downloadFromBlob(blob, fileName);
        });
    };
    /**
     * Downloads the blob object as a file
     * @param blob file object as blob
     * @param fileName downloadable file name
     */
    ExportAsService.prototype.downloadFromBlob = function (blob, fileName) {
        // get object url
        var url = window.URL.createObjectURL(blob);
        // check for microsoft internet explorer
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            // use IE download or open if the user using IE
            window.navigator.msSaveOrOpenBlob(blob, fileName);
        }
        else {
            // if not using IE then create link element
            var element = document.createElement('a');
            // set download attr with file name
            element.setAttribute('download', fileName);
            // set the element as hidden
            element.style.display = 'none';
            // append the body
            document.body.appendChild(element);
            // set href attr
            element.href = url;
            // click on it to start downloading
            element.click();
            // remove the link from the dom
            document.body.removeChild(element);
        }
    };
    ExportAsService.prototype.getPDF = function (config) {
        var _this = this;
        return Observable.create(function (observer) {
            if (!config.options) {
                config.options = {};
            }
            config.options.filename = config.fileName;
            var element = document.getElementById(config.elementIdOrContent);
            var pdf = html2pdf().set(config.options).from(element ? element : config.elementIdOrContent);
            var download = config.download;
            var pdfCallbackFn = config.options.pdfCallbackFn;
            if (download) {
                if (pdfCallbackFn) {
                    _this.applyPdfCallbackFn(pdf, pdfCallbackFn).save();
                }
                else {
                    pdf.save();
                }
                observer.next();
                observer.complete();
            }
            else {
                if (pdfCallbackFn) {
                    _this.applyPdfCallbackFn(pdf, pdfCallbackFn).outputPdf('datauristring').then(function (data) {
                        observer.next(data);
                        observer.complete();
                    });
                }
                else {
                    pdf.outputPdf('datauristring').then(function (data) {
                        observer.next(data);
                        observer.complete();
                    });
                }
            }
        });
    };
    ExportAsService.prototype.applyPdfCallbackFn = function (pdf, pdfCallbackFn) {
        return pdf.toPdf().get('pdf').then(function (pdfRef) {
            pdfCallbackFn(pdfRef);
        });
    };
    ExportAsService.prototype.getPNG = function (config) {
        var _this = this;
        return Observable.create(function (observer) {
            var element = document.getElementById(config.elementIdOrContent);
            html2canvas(element, config.options).then(function (canvas) {
                var imgData = canvas.toDataURL('image/PNG');
                if (config.type === 'png' && config.download) {
                    _this.downloadFromDataURL(config.fileName, imgData);
                    observer.next();
                }
                else {
                    observer.next(imgData);
                }
                observer.complete();
            }, function (err) {
                observer.error(err);
            });
        });
    };
    ExportAsService.prototype.getCSV = function (config) {
        var _this = this;
        return Observable.create(function (observer) {
            var element = document.getElementById(config.elementIdOrContent);
            var csv = [];
            var rows = element.querySelectorAll('table tr');
            for (var index = 0; index < rows.length; index++) {
                var rowElement = rows[index];
                var row = [];
                var cols = rowElement.querySelectorAll('td, th');
                for (var colIndex = 0; colIndex < cols.length; colIndex++) {
                    var col = cols[colIndex];
                    row.push(col.innerText);
                }
                csv.push(row.join(','));
            }
            var csvContent = 'data:text/csv;base64,' + _this.btoa(csv.join('\n'));
            if (config.download) {
                _this.downloadFromDataURL(config.fileName, csvContent);
                observer.next();
            }
            else {
                observer.next(csvContent);
            }
            observer.complete();
        });
    };
    ExportAsService.prototype.getTXT = function (config) {
        var nameFrags = config.fileName.split('.');
        config.fileName = nameFrags[0] + ".txt";
        return this.getCSV(config);
    };
    ExportAsService.prototype.getXLS = function (config) {
        var _this = this;
        return Observable.create(function (observer) {
            var element = document.getElementById(config.elementIdOrContent);
            var ws3 = XLSX.utils.table_to_sheet(element, config.options);
            var wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws3, config.fileName);
            var out = XLSX.write(wb, { type: 'base64' });
            var xlsContent = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + out;
            if (config.download) {
                _this.downloadFromDataURL(config.fileName, xlsContent);
                observer.next();
            }
            else {
                observer.next(xlsContent);
            }
            observer.complete();
        });
    };
    ExportAsService.prototype.getXLSX = function (config) {
        return this.getXLS(config);
    };
    // private getDOCX(config: ExportAsConfig): Observable<string | null> {
    //   return Observable.create((observer) => {
    //     const contentDocument: string = document.getElementById(config.elementIdOrContent).outerHTML;
    //     const content = '<!DOCTYPE html>' + contentDocument;
    //     const converted = htmlDocx.asBlob(content, config.options);
    //     if (config.download) {
    //       this.downloadFromBlob(converted, config.fileName);
    //       observer.next();
    //       observer.complete();
    //     } else {
    //       const reader = new FileReader();
    //       reader.onloadend = () => {
    //         const base64data = reader.result;
    //         observer.next(base64data);
    //         observer.complete();
    //       };
    //       reader.readAsDataURL(converted);
    //     }
    //   });
    // }
    // private getDOC(config: ExportAsConfig): Observable<string | null> {
    //   return this.getDOCX(config);
    // }
    ExportAsService.prototype.getJSON = function (config) {
        var _this = this;
        return Observable.create(function (observer) {
            var data = []; // first row needs to be headers
            var headers = [];
            var table = document.getElementById(config.elementIdOrContent);
            for (var index = 0; index < table.rows[0].cells.length; index++) {
                headers[index] = table.rows[0].cells[index].innerHTML.toLowerCase().replace(/ /gi, '');
            }
            // go through cells
            for (var i = 1; i < table.rows.length; i++) {
                var tableRow = table.rows[i];
                var rowData = {};
                for (var j = 0; j < tableRow.cells.length; j++) {
                    rowData[headers[j]] = tableRow.cells[j].innerHTML;
                }
                data.push(rowData);
            }
            var jsonString = JSON.stringify(data);
            var jsonBase64 = _this.btoa(jsonString);
            var dataStr = 'data:text/json;base64,' + jsonBase64;
            if (config.download) {
                _this.downloadFromDataURL(config.fileName, dataStr);
                observer.next();
            }
            else {
                observer.next(data);
            }
            observer.complete();
        });
    };
    ExportAsService.prototype.getXML = function (config) {
        var _this = this;
        return Observable.create(function (observer) {
            var xml = '<?xml version="1.0" encoding="UTF-8"?><Root><Classes>';
            var tritem = document.getElementById(config.elementIdOrContent).getElementsByTagName('tr');
            for (var i = 0; i < tritem.length; i++) {
                var celldata = tritem[i];
                if (celldata.cells.length > 0) {
                    xml += '<Class name="' + celldata.cells[0].textContent + '">\n';
                    for (var m = 1; m < celldata.cells.length; ++m) {
                        xml += '\t<data>' + celldata.cells[m].textContent + '</data>\n';
                    }
                    xml += '</Class>\n';
                }
            }
            xml += '</Classes></Root>';
            var base64 = 'data:text/xml;base64,' + _this.btoa(xml);
            if (config.download) {
                _this.downloadFromDataURL(config.fileName, base64);
                observer.next();
            }
            else {
                observer.next(base64);
            }
            observer.complete();
        });
    };
    ExportAsService.prototype.btoa = function (content) {
        return btoa(unescape(encodeURIComponent(content)));
    };
    ExportAsService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [])
    ], ExportAsService);
    return ExportAsService;
}());
export { ExportAsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LWFzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZXhwb3J0LWFzLyIsInNvdXJjZXMiOlsibGliL2V4cG9ydC1hcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFJbEMsT0FBTyxXQUFXLE1BQU0sYUFBYSxDQUFDO0FBQ3RDLE9BQU8sS0FBSyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQzdCLDJEQUEyRDtBQUMzRCxPQUFPLFFBQVEsTUFBTSxhQUFhLENBQUM7QUFFbkMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLFdBQVcsQ0FBQztBQUdwQztJQUVFO0lBQWdCLENBQUM7SUFFakI7OztPQUdHO0lBQ0gsNkJBQUcsR0FBSCxVQUFJLE1BQXNCO1FBQ3hCLDRDQUE0QztRQUM1QyxJQUFNLElBQUksR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMvQyx1Q0FBdUM7UUFDdkMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDZCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzQjtRQUVELHNDQUFzQztRQUN0QyxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUFRLElBQU8sUUFBUSxDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCw4QkFBSSxHQUFKLFVBQUssTUFBc0IsRUFBRSxRQUFnQjtRQUMzQyxlQUFlO1FBQ2YsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDdkIsMEJBQTBCO1FBQzFCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUSxHQUFHLEdBQUcsR0FB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LENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQztvQkFDaEUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO3dCQUM5QyxHQUFHLElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztxQkFDakU7b0JBQ0QsR0FBRyxJQUFJLFlBQVksQ0FBQztpQkFDckI7YUFDRjtZQUNELEdBQUcsSUFBSSxtQkFBbUIsQ0FBQztZQUMzQixJQUFNLE1BQU0sR0FBRyx1QkFBdUIsR0FBRyxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hELElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDbkIsS0FBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ2xELFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNqQjtpQkFBTTtnQkFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3ZCO1lBQ0QsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLDhCQUFJLEdBQVosVUFBYSxPQUFlO1FBQzFCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQXRUVSxlQUFlO1FBRDNCLFVBQVUsRUFBRTs7T0FDQSxlQUFlLENBd1QzQjtJQUFELHNCQUFDO0NBQUEsQUF4VEQsSUF3VEM7U0F4VFksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgRXhwb3J0QXNDb25maWcgfSBmcm9tICcuL2V4cG9ydC1hcy1jb25maWcubW9kZWwnO1xyXG5cclxuaW1wb3J0IGh0bWwyY2FudmFzIGZyb20gJ2h0bWwyY2FudmFzJztcclxuaW1wb3J0ICogYXMgWExTWCBmcm9tICd4bHN4JztcclxuLy8gaW1wb3J0ICogYXMgaHRtbERvY3ggZnJvbSAnaHRtbC1kb2N4LWpzL2Rpc3QvaHRtbC1kb2N4JztcclxuaW1wb3J0IGh0bWwycGRmIGZyb20gJ2h0bWwycGRmLmpzJztcclxuXHJcbndpbmRvd1snaHRtbDJjYW52YXMnXSA9IGh0bWwyY2FudmFzO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRXhwb3J0QXNTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFpbiBiYXNlNjQgZ2V0IG1ldGhvZCwgaXQgd2lsbCByZXR1cm4gdGhlIGZpbGUgYXMgYmFzZTY0IHN0cmluZ1xyXG4gICAqIEBwYXJhbSBjb25maWcgeW91ciBjb25maWdcclxuICAgKi9cclxuICBnZXQoY29uZmlnOiBFeHBvcnRBc0NvbmZpZyk6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD4ge1xyXG4gICAgLy8gc3RydWN0dXJlIG1ldGhvZCBuYW1lIGR5bmFtaWNhbGx5IGJ5IHR5cGVcclxuICAgIGNvbnN0IGZ1bmMgPSAnZ2V0JyArIGNvbmZpZy50eXBlLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAvLyBpZiB0eXBlIHN1cHBvcnRlZCBleGVjdXRlIGFuZCByZXR1cm5cclxuICAgIGlmICh0aGlzW2Z1bmNdKSB7XHJcbiAgICAgIHJldHVybiB0aGlzW2Z1bmNdKGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdGhyb3cgZXJyb3IgZm9yIHVuc3VwcG9ydGVkIGZvcm1hdHNcclxuICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXIpID0+IHsgb2JzZXJ2ZXIuZXJyb3IoJ0V4cG9ydCB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQuJyk7IH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2F2ZSBleHBvcnRlZCBmaWxlIGluIG9sZCBqYXZhc2NyaXB0IHdheVxyXG4gICAqIEBwYXJhbSBjb25maWcgeW91ciBjdXN0b20gY29uZmlnXHJcbiAgICogQHBhcmFtIGZpbGVOYW1lIE5hbWUgb2YgdGhlIGZpbGUgdG8gYmUgc2F2ZWQgYXNcclxuICAgKi9cclxuICBzYXZlKGNvbmZpZzogRXhwb3J0QXNDb25maWcsIGZpbGVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIC8vIHNldCBkb3dubG9hZFxyXG4gICAgY29uZmlnLmRvd25sb2FkID0gdHJ1ZTtcclxuICAgIC8vIGdldCBmaWxlIG5hbWUgd2l0aCB0eXBlXHJcbiAgICBjb25maWcuZmlsZU5hbWUgPSBmaWxlTmFtZSArICcuJyArIGNvbmZpZy50eXBlO1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0KGNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0cyBjb250ZW50IHN0cmluZyB0byBibG9iIG9iamVjdFxyXG4gICAqIEBwYXJhbSBjb250ZW50IHN0cmluZyB0byBiZSBjb252ZXJ0ZWRcclxuICAgKi9cclxuICBjb250ZW50VG9CbG9iKGNvbnRlbnQ6IHN0cmluZyk6IE9ic2VydmFibGU8QmxvYj4ge1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcikgPT4ge1xyXG4gICAgICAvLyBnZXQgY29udGVudCBzdHJpbmcgYW5kIGV4dHJhY3QgbWltZSB0eXBlXHJcbiAgICAgIGNvbnN0IGFyciA9IGNvbnRlbnQuc3BsaXQoJywnKSwgbWltZSA9IGFyclswXS5tYXRjaCgvOiguKj8pOy8pWzFdLFxyXG4gICAgICAgIGJzdHIgPSBhdG9iKGFyclsxXSk7XHJcbiAgICAgIGxldCBuID0gYnN0ci5sZW5ndGg7XHJcbiAgICAgIGNvbnN0IHU4YXJyID0gbmV3IFVpbnQ4QXJyYXkobik7XHJcbiAgICAgIHdoaWxlIChuLS0pIHtcclxuICAgICAgICB1OGFycltuXSA9IGJzdHIuY2hhckNvZGVBdChuKTtcclxuICAgICAgfVxyXG4gICAgICBvYnNlcnZlci5uZXh0KG5ldyBCbG9iKFt1OGFycl0sIHsgdHlwZTogbWltZSB9KSk7XHJcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYmFzZTY0IGZpbGUgdHlwZSBmcm9tIGEgc3RyaW5nIGxpa2UgXCJkYXRhOnRleHQvY3N2O2Jhc2U2NCxcIlxyXG4gICAqIEBwYXJhbSBmaWxlQ29udGVudCB0aGUgYmFzZTY0IHN0cmluZyB0byByZW1vdmUgdGhlIHR5cGUgZnJvbVxyXG4gICAqL1xyXG4gIHJlbW92ZUZpbGVUeXBlRnJvbUJhc2U2NChmaWxlQ29udGVudDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHJlID0gL15kYXRhOlteXSo7YmFzZTY0LC9nO1xyXG4gICAgY29uc3QgbmV3Q29udGVudDogc3RyaW5nID0gcmVbU3ltYm9sLnJlcGxhY2VdKGZpbGVDb250ZW50LCAnJyk7XHJcbiAgICByZXR1cm4gbmV3Q29udGVudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0cnVjdHVyZSB0aGUgYmFzZTY0IGZpbGUgY29udGVudCB3aXRoIHRoZSBmaWxlIHR5cGUgc3RyaW5nXHJcbiAgICogQHBhcmFtIGZpbGVDb250ZW50IGZpbGUgY29udGVudFxyXG4gICAqIEBwYXJhbSBmaWxlTWltZSBmaWxlIG1pbWUgdHlwZSBcInRleHQvY3N2XCJcclxuICAgKi9cclxuICBhZGRGaWxlVHlwZVRvQmFzZTY0KGZpbGVDb250ZW50OiBzdHJpbmcsIGZpbGVNaW1lOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGBkYXRhOiR7ZmlsZU1pbWV9O2Jhc2U2NCwke2ZpbGVDb250ZW50fWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBjcmVhdGUgZG93bmxvYWRhYmxlIGZpbGUgZnJvbSBkYXRhVVJMXHJcbiAgICogQHBhcmFtIGZpbGVOYW1lIGRvd25sb2FkYWJsZSBmaWxlIG5hbWVcclxuICAgKiBAcGFyYW0gZGF0YVVSTCBmaWxlIGNvbnRlbnQgYXMgZGF0YVVSTFxyXG4gICAqL1xyXG4gIGRvd25sb2FkRnJvbURhdGFVUkwoZmlsZU5hbWU6IHN0cmluZywgZGF0YVVSTDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAvLyBjcmVhdGUgYmxvYlxyXG4gICAgdGhpcy5jb250ZW50VG9CbG9iKGRhdGFVUkwpLnN1YnNjcmliZShibG9iID0+IHtcclxuICAgICAgLy8gZG93bmxvYWQgdGhlIGJsb2JcclxuICAgICAgdGhpcy5kb3dubG9hZEZyb21CbG9iKGJsb2IsIGZpbGVOYW1lKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRG93bmxvYWRzIHRoZSBibG9iIG9iamVjdCBhcyBhIGZpbGVcclxuICAgKiBAcGFyYW0gYmxvYiBmaWxlIG9iamVjdCBhcyBibG9iXHJcbiAgICogQHBhcmFtIGZpbGVOYW1lIGRvd25sb2FkYWJsZSBmaWxlIG5hbWVcclxuICAgKi9cclxuICBkb3dubG9hZEZyb21CbG9iKGJsb2I6IEJsb2IsIGZpbGVOYW1lOiBzdHJpbmcpIHtcclxuICAgIC8vIGdldCBvYmplY3QgdXJsXHJcbiAgICBjb25zdCB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgIC8vIGNoZWNrIGZvciBtaWNyb3NvZnQgaW50ZXJuZXQgZXhwbG9yZXJcclxuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYikge1xyXG4gICAgICAvLyB1c2UgSUUgZG93bmxvYWQgb3Igb3BlbiBpZiB0aGUgdXNlciB1c2luZyBJRVxyXG4gICAgICB3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoYmxvYiwgZmlsZU5hbWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gaWYgbm90IHVzaW5nIElFIHRoZW4gY3JlYXRlIGxpbmsgZWxlbWVudFxyXG4gICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAvLyBzZXQgZG93bmxvYWQgYXR0ciB3aXRoIGZpbGUgbmFtZVxyXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBmaWxlTmFtZSk7XHJcbiAgICAgIC8vIHNldCB0aGUgZWxlbWVudCBhcyBoaWRkZW5cclxuICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAvLyBhcHBlbmQgdGhlIGJvZHlcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgICAgLy8gc2V0IGhyZWYgYXR0clxyXG4gICAgICBlbGVtZW50LmhyZWYgPSB1cmw7XHJcbiAgICAgIC8vIGNsaWNrIG9uIGl0IHRvIHN0YXJ0IGRvd25sb2FkaW5nXHJcbiAgICAgIGVsZW1lbnQuY2xpY2soKTtcclxuICAgICAgLy8gcmVtb3ZlIHRoZSBsaW5rIGZyb20gdGhlIGRvbVxyXG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRQREYoY29uZmlnOiBFeHBvcnRBc0NvbmZpZyk6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcikgPT4ge1xyXG4gICAgICBpZiAoIWNvbmZpZy5vcHRpb25zKSB7XHJcbiAgICAgICAgY29uZmlnLm9wdGlvbnMgPSB7fTtcclxuICAgICAgfVxyXG4gICAgICBjb25maWcub3B0aW9ucy5maWxlbmFtZSA9IGNvbmZpZy5maWxlTmFtZTtcclxuICAgICAgY29uc3QgZWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25maWcuZWxlbWVudElkT3JDb250ZW50KTtcclxuICAgICAgY29uc3QgcGRmID0gaHRtbDJwZGYoKS5zZXQoY29uZmlnLm9wdGlvbnMpLmZyb20oZWxlbWVudCA/IGVsZW1lbnQgOiBjb25maWcuZWxlbWVudElkT3JDb250ZW50KTtcclxuXHJcbiAgICAgIGNvbnN0IGRvd25sb2FkID0gY29uZmlnLmRvd25sb2FkO1xyXG4gICAgICBjb25zdCBwZGZDYWxsYmFja0ZuID0gY29uZmlnLm9wdGlvbnMucGRmQ2FsbGJhY2tGbjtcclxuICAgICAgaWYgKGRvd25sb2FkKSB7XHJcbiAgICAgICAgaWYgKHBkZkNhbGxiYWNrRm4pIHtcclxuICAgICAgICAgIHRoaXMuYXBwbHlQZGZDYWxsYmFja0ZuKHBkZiwgcGRmQ2FsbGJhY2tGbikuc2F2ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwZGYuc2F2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZlci5uZXh0KCk7XHJcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAocGRmQ2FsbGJhY2tGbikge1xyXG4gICAgICAgICAgdGhpcy5hcHBseVBkZkNhbGxiYWNrRm4ocGRmLCBwZGZDYWxsYmFja0ZuKS5vdXRwdXRQZGYoJ2RhdGF1cmlzdHJpbmcnKS50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGRhdGEpO1xyXG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHBkZi5vdXRwdXRQZGYoJ2RhdGF1cmlzdHJpbmcnKS50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGRhdGEpO1xyXG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXBwbHlQZGZDYWxsYmFja0ZuKHBkZiwgcGRmQ2FsbGJhY2tGbikge1xyXG4gICAgcmV0dXJuIHBkZi50b1BkZigpLmdldCgncGRmJykudGhlbigocGRmUmVmKSA9PiB7XHJcbiAgICAgIHBkZkNhbGxiYWNrRm4ocGRmUmVmKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRQTkcoY29uZmlnOiBFeHBvcnRBc0NvbmZpZyk6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcikgPT4ge1xyXG4gICAgICBjb25zdCBlbGVtZW50OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbmZpZy5lbGVtZW50SWRPckNvbnRlbnQpO1xyXG4gICAgICBodG1sMmNhbnZhcyhlbGVtZW50LCBjb25maWcub3B0aW9ucykudGhlbigoY2FudmFzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaW1nRGF0YSA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL1BORycpO1xyXG4gICAgICAgIGlmIChjb25maWcudHlwZSA9PT0gJ3BuZycgJiYgY29uZmlnLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICB0aGlzLmRvd25sb2FkRnJvbURhdGFVUkwoY29uZmlnLmZpbGVOYW1lLCBpbWdEYXRhKTtcclxuICAgICAgICAgIG9ic2VydmVyLm5leHQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgb2JzZXJ2ZXIubmV4dChpbWdEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgfSwgZXJyID0+IHtcclxuICAgICAgICBvYnNlcnZlci5lcnJvcihlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRDU1YoY29uZmlnOiBFeHBvcnRBc0NvbmZpZyk6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcikgPT4ge1xyXG4gICAgICBjb25zdCBlbGVtZW50OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbmZpZy5lbGVtZW50SWRPckNvbnRlbnQpO1xyXG4gICAgICBjb25zdCBjc3YgPSBbXTtcclxuICAgICAgY29uc3Qgcm93czogYW55ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0YWJsZSB0cicpO1xyXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcm93cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICBjb25zdCByb3dFbGVtZW50ID0gcm93c1tpbmRleF07XHJcbiAgICAgICAgY29uc3Qgcm93ID0gW107XHJcbiAgICAgICAgY29uc3QgY29scyA9IHJvd0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgndGQsIHRoJyk7XHJcbiAgICAgICAgZm9yIChsZXQgY29sSW5kZXggPSAwOyBjb2xJbmRleCA8IGNvbHMubGVuZ3RoOyBjb2xJbmRleCsrKSB7XHJcbiAgICAgICAgICBjb25zdCBjb2wgPSBjb2xzW2NvbEluZGV4XTtcclxuICAgICAgICAgIHJvdy5wdXNoKGNvbC5pbm5lclRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjc3YucHVzaChyb3cuam9pbignLCcpKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBjc3ZDb250ZW50ID0gJ2RhdGE6dGV4dC9jc3Y7YmFzZTY0LCcgKyB0aGlzLmJ0b2EoY3N2LmpvaW4oJ1xcbicpKTtcclxuICAgICAgaWYgKGNvbmZpZy5kb3dubG9hZCkge1xyXG4gICAgICAgIHRoaXMuZG93bmxvYWRGcm9tRGF0YVVSTChjb25maWcuZmlsZU5hbWUsIGNzdkNvbnRlbnQpO1xyXG4gICAgICAgIG9ic2VydmVyLm5leHQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvYnNlcnZlci5uZXh0KGNzdkNvbnRlbnQpO1xyXG4gICAgICB9XHJcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0VFhUKGNvbmZpZzogRXhwb3J0QXNDb25maWcpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIGNvbnN0IG5hbWVGcmFncyA9IGNvbmZpZy5maWxlTmFtZS5zcGxpdCgnLicpO1xyXG4gICAgY29uZmlnLmZpbGVOYW1lID0gYCR7bmFtZUZyYWdzWzBdfS50eHRgO1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0Q1NWKGNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFhMUyhjb25maWc6IEV4cG9ydEFzQ29uZmlnKTogT2JzZXJ2YWJsZTxzdHJpbmcgfCBudWxsPiB7XHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyKSA9PiB7XHJcblxyXG4gICAgICBjb25zdCBlbGVtZW50OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbmZpZy5lbGVtZW50SWRPckNvbnRlbnQpO1xyXG4gICAgICBjb25zdCB3czMgPSBYTFNYLnV0aWxzLnRhYmxlX3RvX3NoZWV0KGVsZW1lbnQsIGNvbmZpZy5vcHRpb25zKTtcclxuICAgICAgY29uc3Qgd2IgPSBYTFNYLnV0aWxzLmJvb2tfbmV3KCk7XHJcbiAgICAgIFhMU1gudXRpbHMuYm9va19hcHBlbmRfc2hlZXQod2IsIHdzMywgY29uZmlnLmZpbGVOYW1lKTtcclxuICAgICAgY29uc3Qgb3V0ID0gWExTWC53cml0ZSh3YiwgeyB0eXBlOiAnYmFzZTY0JyB9KTtcclxuICAgICAgY29uc3QgeGxzQ29udGVudCA9ICdkYXRhOmFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0O2Jhc2U2NCwnICsgb3V0O1xyXG4gICAgICBpZiAoY29uZmlnLmRvd25sb2FkKSB7XHJcbiAgICAgICAgdGhpcy5kb3dubG9hZEZyb21EYXRhVVJMKGNvbmZpZy5maWxlTmFtZSwgeGxzQ29udGVudCk7XHJcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9ic2VydmVyLm5leHQoeGxzQ29udGVudCk7XHJcbiAgICAgIH1cclxuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRYTFNYKGNvbmZpZzogRXhwb3J0QXNDb25maWcpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIHJldHVybiB0aGlzLmdldFhMUyhjb25maWcpO1xyXG4gIH1cclxuXHJcbiAgLy8gcHJpdmF0ZSBnZXRET0NYKGNvbmZpZzogRXhwb3J0QXNDb25maWcpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcclxuICAvLyAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXIpID0+IHtcclxuICAvLyAgICAgY29uc3QgY29udGVudERvY3VtZW50OiBzdHJpbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25maWcuZWxlbWVudElkT3JDb250ZW50KS5vdXRlckhUTUw7XHJcbiAgLy8gICAgIGNvbnN0IGNvbnRlbnQgPSAnPCFET0NUWVBFIGh0bWw+JyArIGNvbnRlbnREb2N1bWVudDtcclxuICAvLyAgICAgY29uc3QgY29udmVydGVkID0gaHRtbERvY3guYXNCbG9iKGNvbnRlbnQsIGNvbmZpZy5vcHRpb25zKTtcclxuICAvLyAgICAgaWYgKGNvbmZpZy5kb3dubG9hZCkge1xyXG4gIC8vICAgICAgIHRoaXMuZG93bmxvYWRGcm9tQmxvYihjb252ZXJ0ZWQsIGNvbmZpZy5maWxlTmFtZSk7XHJcbiAgLy8gICAgICAgb2JzZXJ2ZXIubmV4dCgpO1xyXG4gIC8vICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgLy8gICAgIH0gZWxzZSB7XHJcbiAgLy8gICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAvLyAgICAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4ge1xyXG4gIC8vICAgICAgICAgY29uc3QgYmFzZTY0ZGF0YSA9IHJlYWRlci5yZXN1bHQ7XHJcbiAgLy8gICAgICAgICBvYnNlcnZlci5uZXh0KGJhc2U2NGRhdGEpO1xyXG4gIC8vICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAvLyAgICAgICB9O1xyXG4gIC8vICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGNvbnZlcnRlZCk7XHJcbiAgLy8gICAgIH1cclxuICAvLyAgIH0pO1xyXG4gIC8vIH1cclxuXHJcbiAgLy8gcHJpdmF0ZSBnZXRET0MoY29uZmlnOiBFeHBvcnRBc0NvbmZpZyk6IE9ic2VydmFibGU8c3RyaW5nIHwgbnVsbD4ge1xyXG4gIC8vICAgcmV0dXJuIHRoaXMuZ2V0RE9DWChjb25maWcpO1xyXG4gIC8vIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRKU09OKGNvbmZpZzogRXhwb3J0QXNDb25maWcpOiBPYnNlcnZhYmxlPGFueVtdIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcikgPT4ge1xyXG4gICAgICBjb25zdCBkYXRhID0gW107IC8vIGZpcnN0IHJvdyBuZWVkcyB0byBiZSBoZWFkZXJzXHJcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSBbXTtcclxuICAgICAgY29uc3QgdGFibGUgPSA8SFRNTFRhYmxlRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25maWcuZWxlbWVudElkT3JDb250ZW50KTtcclxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRhYmxlLnJvd3NbMF0uY2VsbHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgaGVhZGVyc1tpbmRleF0gPSB0YWJsZS5yb3dzWzBdLmNlbGxzW2luZGV4XS5pbm5lckhUTUwudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2dpLCAnJyk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gZ28gdGhyb3VnaCBjZWxsc1xyXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRhYmxlLnJvd3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCB0YWJsZVJvdyA9IHRhYmxlLnJvd3NbaV07IGNvbnN0IHJvd0RhdGEgPSB7fTtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRhYmxlUm93LmNlbGxzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICByb3dEYXRhW2hlYWRlcnNbal1dID0gdGFibGVSb3cuY2VsbHNbal0uaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkYXRhLnB1c2gocm93RGF0YSk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QganNvblN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG4gICAgICBjb25zdCBqc29uQmFzZTY0ID0gdGhpcy5idG9hKGpzb25TdHJpbmcpO1xyXG4gICAgICBjb25zdCBkYXRhU3RyID0gJ2RhdGE6dGV4dC9qc29uO2Jhc2U2NCwnICsganNvbkJhc2U2NDtcclxuICAgICAgaWYgKGNvbmZpZy5kb3dubG9hZCkge1xyXG4gICAgICAgIHRoaXMuZG93bmxvYWRGcm9tRGF0YVVSTChjb25maWcuZmlsZU5hbWUsIGRhdGFTdHIpO1xyXG4gICAgICAgIG9ic2VydmVyLm5leHQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvYnNlcnZlci5uZXh0KGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0WE1MKGNvbmZpZzogRXhwb3J0QXNDb25maWcpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgbGV0IHhtbCA9ICc8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz48Um9vdD48Q2xhc3Nlcz4nO1xyXG4gICAgICBjb25zdCB0cml0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb25maWcuZWxlbWVudElkT3JDb250ZW50KS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndHInKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cml0ZW0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjZWxsZGF0YSA9IHRyaXRlbVtpXTtcclxuICAgICAgICBpZiAoY2VsbGRhdGEuY2VsbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgeG1sICs9ICc8Q2xhc3MgbmFtZT1cIicgKyBjZWxsZGF0YS5jZWxsc1swXS50ZXh0Q29udGVudCArICdcIj5cXG4nO1xyXG4gICAgICAgICAgZm9yIChsZXQgbSA9IDE7IG0gPCBjZWxsZGF0YS5jZWxscy5sZW5ndGg7ICsrbSkge1xyXG4gICAgICAgICAgICB4bWwgKz0gJ1xcdDxkYXRhPicgKyBjZWxsZGF0YS5jZWxsc1ttXS50ZXh0Q29udGVudCArICc8L2RhdGE+XFxuJztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHhtbCArPSAnPC9DbGFzcz5cXG4nO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB4bWwgKz0gJzwvQ2xhc3Nlcz48L1Jvb3Q+JztcclxuICAgICAgY29uc3QgYmFzZTY0ID0gJ2RhdGE6dGV4dC94bWw7YmFzZTY0LCcgKyB0aGlzLmJ0b2EoeG1sKTtcclxuICAgICAgaWYgKGNvbmZpZy5kb3dubG9hZCkge1xyXG4gICAgICAgIHRoaXMuZG93bmxvYWRGcm9tRGF0YVVSTChjb25maWcuZmlsZU5hbWUsIGJhc2U2NCk7XHJcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9ic2VydmVyLm5leHQoYmFzZTY0KTtcclxuICAgICAgfVxyXG4gICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGJ0b2EoY29udGVudDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29udGVudCkpKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==