{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/timepicker-time.namespace.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","AM","PM","moment","_moment","TimeAdapter","formatTime","time","format","timeFormat","TimeFormat","convertTimeToMoment","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","Error","isAfter","isSameOrAfter","isBefore","isSameOrBefore","isBetween","formatHour","currentHour","period","hour","TimePeriod","moment_","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","defineProperty","defaultTime","toDate","isValid","getHours","minute","getMinutes","substr","toUpperCase","resetTime","next","asObservable","setDefaultTimeIfAvailable","e","console","error","getFullTime","getValue","Injectable","HOUR","MINUTE","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","dispatchEvent","event","type","ENTER","LEAVE","NgxMaterialTimepickerComponent","timepickerService","eventService","_this","timeUnit","TimeUnit","activeTimeUnit","isOpened","isEsc","timeSet","EventEmitter","opened","closed","hourSelected","subscriptions","push","merge","backdropClick","keydownEvent","pipe","filter","keyCode","subscribe","close","_minutesGap","gap","Math","floor","setDefaultTime","timepickerInput","disabled","ngOnInit","selectedHour","selectedMinute","selectedPeriod","registerInput","input","onHourChange","onHourSelected","changeTimeUnit","onMinuteChange","changePeriod","unit","setTime","open","animationState","AnimationState","animationDone","phaseName","toState","onKeydown","stopPropagation","ngOnDestroy","forEach","subscription","unsubscribe","Component","args","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","Input","Output","ViewChild","HostListener","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","_disabled","undefined","timepicker","value","ContentChild","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","elementRef","_format","_value","timepickerSubscriptions","onTouched","onChange","_min","_max","picker","registerTimepicker","updateInputValue","_timepicker","warn","onInput","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","nativeElement","host","[disabled]","(input)","(blur)","ElementRef","NgxMaterialTimepickerThemeDirective","element","ngAfterViewInit","theme","setTheme","val","prop","setProperty","replace","toLowerCase","TimepickerTime","fill","map","v","disableHours","hours","config","currentTime","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","tslib_1.__extends","ngAfterContentInit","minTime","maxTime","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","countAngleByCords","x0","y0","x","y","currentAngle","isInnerClockChosen","isInnerClockFace","angleStep","roundedAngle","roundAngle","onMouseup","isHourSelected","isClockFaceDisabled","isMinuteSelected","removeTouchEvents","touchStartHandler","bind","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","every","availableTime","sqrt","pow","changeDetection","ChangeDetectionStrategy","OnPush","step","round","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeFormatterPipe","moment.utc","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeChanged","focused","unfocused","timeList","isEditable","firstChange","saveTimeAndChangeTimeUnit","previousTime","updateTime","onKeyDown","char","String","fromCharCode","isInputAllowed","isTimeDisabledToChange","nextTime","test","isTimeUnavailable","changeTimeByArrow","some","ctrlKey","metaKey","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","StyleSanitizerPipe","domSanitizer","bypassSecurityTrustStyle","DomSanitizer","OverlayDirective","preventClick","MinutesFormatterPipe","AutofocusDirective","document","activeElement","isFocusActive","focus","Optional","Inject","DOCUMENT","NgxMaterialTimepickerModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWENTY_FOUR = 'HH:mm'\n}\n","import * as _moment from 'moment';\nimport { Moment, unitOfTime } from 'moment';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { TimePeriod } from '../models/time-period.enum';\n\nconst moment = _moment;\n\nexport class TimeAdapter {\n\n    static formatTime(time: string, format = 12): string {\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n        return moment(time, TimeFormat.TWELVE).format(timeFormat);\n    }\n\n    static convertTimeToMoment(time: string): Moment {\n        return moment(time, TimeFormat.TWELVE);\n    }\n\n    static isTimeAvailable(time: string, min?: Moment, max?: Moment, granularity?: unitOfTime.StartOf, minutesGap?: number): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.convertTimeToMoment(time);\n        const minutes = convertedTime.minutes();\n\n        if (minutesGap && (minutes % minutesGap !== 0)) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && convertedTime.isSameOrAfter(min, granularity);\n        const isBefore = (max && !min)\n            && convertedTime.isSameOrBefore(max, granularity);\n        const isBetween = (min && max)\n            && convertedTime.isBetween(min, max, granularity, '[]');\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || isBetween || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ClockFaceTime} from '../models/clock-face-time.interface';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {TimePeriod} from '../models/time-period.enum';\nimport * as moment_ from 'moment';\nimport {TimeFormat} from '../models/time-format.enum';\nimport {TimeAdapter} from './time-adapter';\nimport {Moment} from 'moment';\n\nconst moment = moment_;\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable()\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n    private set defaultTime(time: string) {\n        const defaultTime = moment(time, TimeFormat.TWENTY_FOUR).toDate();\n\n        if (moment(defaultTime).isValid()) {\n            this.hour = {...DEFAULT_HOUR, time: defaultTime.getHours()};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = <TimePeriod>time.substr(time.length - 2).toUpperCase();\n        } else {\n            this.resetTime();\n        }\n    }\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        this.periodSubject.next(period);\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: Moment, max: Moment, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n                this.defaultTime = TimeAdapter.formatTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const hour = this.hourSubject.getValue().time;\n        const minute = this.minuteSubject.getValue().time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable()\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable();\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable();\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import { Component, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { ClockFaceTime } from './models/clock-face-time.interface';\nimport { TimePeriod } from './models/time-period.enum';\nimport { merge, Subscription } from 'rxjs';\nimport { NgxMaterialTimepickerService } from './services/ngx-material-timepicker.service';\nimport { TimeUnit } from './models/time-unit.enum';\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter } from 'rxjs/operators';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { Moment } from 'moment';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    templateUrl: './ngx-material-timepicker.component.html',\n    styleUrls: ['./ngx-material-timepicker.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\n\n    selectedHour: ClockFaceTime;\n    selectedMinute: ClockFaceTime;\n    selectedPeriod: TimePeriod;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    isOpened = false;\n    animationState: AnimationState;\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n    @Input() preventOverlayClick: boolean;\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Input()\n    set defaultTime(time: string) {\n        this.setDefaultTime(time);\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() opened = new EventEmitter<null>();\n    @Output() closed = new EventEmitter<null>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    @ViewChild('timepickerww') timepickerComponent: ElementRef;\n\n    private _minutesGap: number;\n    private timepickerInput: TimepickerDirective;\n    private subscriptions: Subscription[] = [];\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService) {\n\n        this.subscriptions.push(merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .subscribe(() => this.close()));\n\n    }\n\n    get minTime(): string | Moment {\n        return this.timepickerInput && this.timepickerInput.min;\n    }\n\n    get maxTime(): string | Moment {\n        return this.timepickerInput && this.timepickerInput.max;\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get format(): number {\n        return this.timepickerInput && this.timepickerInput.format;\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(this.timepickerService.selectedHour\n            .subscribe(hour => this.selectedHour = hour));\n\n        this.subscriptions.push(this.timepickerService.selectedMinute\n            .subscribe(minute => this.selectedMinute = minute));\n\n        this.subscriptions.push(this.timepickerService.selectedPeriod\n            .subscribe(period => this.selectedPeriod = period));\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n    }\n\n    onHourSelected(hour: number): void {\n        this.changeTimeUnit(TimeUnit.MINUTE);\n        this.hourSelected.next(hour);\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime(): void {\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(\n            time, this.minTime as Moment, this.maxTime as Moment, this.format, this.minutesGap);\n    }\n\n    open(): void {\n        this.isOpened = true;\n        this.animationState = AnimationState.ENTER;\n        this.opened.next();\n    }\n\n    close(): void {\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.isOpened = false;\n            this.activeTimeUnit = TimeUnit.HOUR;\n            this.closed.next();\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: KeyboardEvent) {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\n\n@Component({\n    selector: 'ngx-material-timepicker-toggle',\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n})\n\nexport class NgxMaterialTimepickerToggleComponent {\n\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    private _disabled: boolean;\n\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import {Directive, ElementRef, forwardRef, HostListener, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {NgxMaterialTimepickerComponent} from '../ngx-material-timepicker.component';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {Moment} from 'moment';\nimport {TimeAdapter} from '../services/time-adapter';\n\nconst VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line\n    useExisting: forwardRef(() => TimepickerDirective),\n    multi: true\n};\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [VALUE_ACCESSOR],\n    host: {\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | Moment) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.convertTimeToMoment(value);\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | Moment {\n        return this._min;\n    }\n\n    private _min: string | Moment;\n\n    @Input()\n    set max(value: string | Moment) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.convertTimeToMoment(value);\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | Moment {\n        return this._max;\n    }\n\n    private _max: string | Moment;\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, this._format);\n        if (TimeAdapter.isTimeAvailable(time, <Moment>this._min, <Moment>this._max, 'minutes', this._timepicker.minutesGap)) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        return this._value;\n    }\n\n    private _value = '';\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n    private timepickerSubscriptions: Subscription[] = [];\n    onTouched = () => {};\n    private onChange: (value: any) => void = () => {};\n\n    constructor(private elementRef: ElementRef) {\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.setDefaultTime(time);\n    }\n\n    onInput(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        this.defaultTime = value;\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this._value);\n                this.onTouched();\n            }));\n            this.timepickerSubscriptions.push(\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\n\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\n\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\n\n    private element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this.element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === 'string') {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n","import {ClockFaceTime} from './models/clock-face-time.interface';\nimport * as _moment from 'moment';\nimport {TimeAdapter} from './services/time-adapter';\nimport {TimeFormat} from './models/time-format.enum';\nimport {DisabledTimeConfig} from './models/disabled-time-config.interface';\n\nconst moment = _moment;\n\nexport namespace TimepickerTime {\n\n    export function getHours(format: number): ClockFaceTime[] {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n            return {time: time === 24 ? 0 : time, angle};\n        });\n    }\n\n    export function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n        if (config.min || config.max) {\n\n            return hours.map(value => {\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(+value.time, config.format, config.period);\n                const currentTime = moment().hour(+hour).format(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n                };\n            });\n        }\n        return hours;\n    }\n\n    export function getMinutes(gap = 1): ClockFaceTime[] {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n            }\n        }\n        return minutes;\n    }\n\n    export function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n        if (config.min || config.max) {\n\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n            return minutes.map(value => {\n                const currentTime = moment().hour(hour).minute(+value.time).format(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n                };\n            });\n        }\n        return minutes;\n    }\n}\n","import {EventEmitter, Input, Output} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {Moment} from 'moment';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: Moment;\n    @Input() maxTime: Moment;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = TimepickerTime.getHours(format);\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import {AfterContentInit, Component} from '@angular/core';\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html'\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = TimepickerTime.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport {TimePeriod} from '../../models/time-period.enum';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html'\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = TimepickerTime.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {TimePeriod} from '../../models/time-period.enum';\nimport {Moment} from 'moment';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: Moment;\n    @Input() maxTime: Moment;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\n            this.minutesList = TimepickerTime.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<number>();\n\n    @ViewChild('clockFace') clockFace: ElementRef;\n    @ViewChild('clockHand') clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: MouseEvent | TouchEvent) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: MouseEvent | Touch): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\n        const roundedAngle = isInnerClockChosen\n            ? roundAngle(circleAngle, angleStep) + 360\n            : roundAngle(circleAngle, angleStep);\n        const angle = roundedAngle === 0 ? 360 : roundedAngle;\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: MouseEvent | TouchEvent) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    isHourSelected(hour: number): boolean {\n        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;\n    }\n\n    isMinuteSelected(minute: number): boolean {\n        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-button',\n    templateUrl: './ngx-material-timepicker-button.component.html',\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\n})\nexport class NgxMaterialTimepickerButtonComponent {\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, TemplateRef } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimepickerTime } from '../../timepicker-time.namespace';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { Moment } from 'moment';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n\n    isHintVisible: boolean;\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: Moment;\n    @Input() maxTime: Moment;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = TimepickerTime.getHours(this.format);\n\n            this.hours = TimepickerTime.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\n\n            this.minutes = TimepickerTime.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as moment from 'moment';\nimport {TimeUnit} from '../models/time-unit.enum';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number, timeUnit: TimeUnit): any {\n        if (time === undefined) {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return moment.utc(time * 3600 * 1000).format('HH');\n            case TimeUnit.MINUTE:\n                return moment.utc(time * 60 * 1000).format('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","/* tslint:disable:triple-equals */\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimeFormatterPipe } from '../../pipes/time-formatter.pipe';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss']\n})\nexport class NgxMaterialTimepickerDialControlComponent implements OnChanges {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n    @Output() focused = new EventEmitter<null>();\n    @Output() unfocused = new EventEmitter<null>();\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['time'] && (changes['time'].currentValue !== undefined)) {\n            if (this.isEditable && !changes['time'].firstChange) {\n                return;\n            }\n            this.time = new TimeFormatterPipe().transform(+changes['time'].currentValue, this.timeUnit);\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    formatTime(): void {\n        if (this.isEditable) {\n            const time = this.time || this.previousTime;\n            this.time = new TimeFormatterPipe().transform(+time, this.timeUnit);\n            this.unfocused.next();\n        }\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        const char = String.fromCharCode(e.keyCode);\n\n\n        if ((!isInputAllowed(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n\n        if (isInputAllowed(e)) {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + (this.minutesGap || 1));\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isInputAllowed(e: KeyboardEvent): boolean {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {TimePeriod} from '../../models/time-period.enum';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\nimport {Moment} from 'moment';\nimport {animate, sequence, style, transition, trigger} from '@angular/animations';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: Moment;\n    @Input() maxTime: Moment;\n    @Input() selectedHour: number | string;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return TimepickerTime.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return TimepickerTime.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n@Pipe({\n    name: 'styleSanitizer'\n})\nexport class StyleSanitizerPipe implements PipeTransform {\n\n    constructor(private domSanitizer: DomSanitizer) {\n    }\n\n    transform(value: string): any {\n        if (!value) {\n            return value;\n        }\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    @Input('overlay') preventClick: boolean;\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: MouseEvent) {\n        if (!this.preventClick) {\n            this.eventService.dispatchEvent(e);\n        }\n        e.preventDefault();\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus());\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus());\n    }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NgxMaterialTimepickerComponent} from './ngx-material-timepicker.component';\nimport {FormsModule} from '@angular/forms';\nimport {NgxMaterialTimepickerToggleComponent} from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\nimport {NgxMaterialTimepickerToggleIconDirective} from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerThemeDirective} from './directives/ngx-material-timepicker-theme.directive';\nimport {\n    NgxMaterialTimepicker24HoursFaceComponent\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {\n    NgxMaterialTimepicker12HoursFaceComponent\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {\n    NgxMaterialTimepickerMinutesFaceComponent\n} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport {NgxMaterialTimepickerFaceComponent} from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport {NgxMaterialTimepickerButtonComponent} from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport {NgxMaterialTimepickerDialComponent} from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {\n    NgxMaterialTimepickerDialControlComponent\n} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport {NgxMaterialTimepickerPeriodComponent} from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport {StyleSanitizerPipe} from './pipes/style-sanitizer.pipe';\nimport {TimeFormatterPipe} from './pipes/time-formatter.pipe';\nimport {OverlayDirective} from './directives/overlay.directive';\nimport {MinutesFormatterPipe} from './pipes/minutes-formatter.pipe';\nimport {AutofocusDirective} from './directives/autofocus.directive';\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\n\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        NgxMaterialTimepickerThemeDirective\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        StyleSanitizerPipe,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe,\n        NgxMaterialTimepickerThemeDirective\n    ]\n})\nexport class NgxMaterialTimepickerModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: NgxMaterialTimepickerModule,\n            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]\n        };\n    }\n}\n"]}