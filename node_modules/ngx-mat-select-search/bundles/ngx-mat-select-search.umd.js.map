{"version":3,"file":"ngx-mat-select-search.umd.js.map","sources":["ng://ngx-mat-select-search/mat-select-search-clear.directive.ts","ng://ngx-mat-select-search/mat-select-search.component.ts","ng://ngx-mat-select-search/ngx-mat-select-search.module.ts"],"sourcesContent":["import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n@Directive({\n    selector: '[ngxMatSelectSearchClear]'\n})\nexport class MatSelectSearchClearDirective {}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, OnInit, QueryList,\n  ViewChild,\n  ContentChild, Optional, HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatOption, MatSelect, SELECT_PANEL_MAX_HEIGHT, _countGroupLabelsBeforeOption } from '@angular/material';\nimport {\n  A,\n  Z,\n  ZERO,\n  NINE,\n  SPACE, END, HOME,\n} from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Subject } from 'rxjs';\nimport { delay, take, takeUntil } from 'rxjs/operators';\n\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n@Component({\n  selector: 'ngx-mat-select-search',\n  templateUrl: './mat-select-search.component.html',\n  styleUrls: ['./mat-select-search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor {\n\n  /** Label of the search placeholder */\n  @Input() placeholderLabel = 'Suche';\n\n  /** Type of the search input field */\n  @Input() type = \"text\";\n\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\n\n  /**\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n    */\n  @Input() clearSearchInput = true;\n\n  /** Whether to show the search-in-progress indicator */\n  @Input() searching = false;\n\n  /** Disables initial focusing of the input field */\n  @Input() disableInitialFocus = false;\n\n  /**\n   * Prevents home / end key being propagated to mat-select,\n   * allowing to move the cursor within the search input instead of navigating the options\n   */\n  @Input() preventHomeEndKeyPropagation = false;\n\n  /** Disables scrolling to active options when option list changes. Useful for server-side search */\n  @Input() disableScrollToActiveOnOptionsChanged = false;\n\n  /** Adds 508 screen reader support for search box */\n  @Input() ariaLabel = 'dropdown search';\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', {read: ElementRef}) searchSelectInput: ElementRef;\n\n  /** Reference to the search input field */\n  @ViewChild('innerSelectSearch', {read: ElementRef}) innerSelectSearch: ElementRef;\n\n  /** Reference to custom search input clear icon */\n  @ContentChild(MatSelectSearchClearDirective) clearIcon: MatSelectSearchClearDirective;\n\n  @HostBinding('class.mat-select-search-inside-mat-option')\n  get isInsideMatOption(): boolean {\n    return !!this.matOption;\n  }\n\n  /** Current search value */\n  get value(): string {\n    return this._value;\n  }\n  private _value: string;\n\n  onChange: Function = (_: any) => {};\n  onTouched: Function = (_: any) => {};\n\n  /** Reference to the MatSelect options */\n  public _options: QueryList<MatOption>;\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\n  private previousSelectedValues: any[];\n\n  /** Whether the backdrop class has been set */\n  private overlayClassSet = false;\n\n  /** Event that emits when the current value changes */\n  private change = new EventEmitter<string>();\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\n              public changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() @Inject(MatOption) public matOption: MatOption = null) {\n\n\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        this.matSelect.panelClass.push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    }\n\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n    }\n\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange\n      .pipe(\n        delay(1),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe((opened) => {\n        if (opened) {\n          this.updateInputWidth();\n          // focus the search field when opening\n          if (!this.disableInitialFocus) {\n            this._focus();\n          }\n        } else {\n          // clear it when closing\n          if (this.clearSearchInput) {\n            this._reset();\n          }\n        }\n      });\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(take(1))\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect._keyManager) {\n          this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView())\n        } else {\n          console.log('_keyManager was not initialized.');\n        }\n\n        this._options = this.matSelect.options;\n        this._options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            const keyManager = this.matSelect._keyManager;\n            if (keyManager && this.matSelect.panelOpen) {\n\n              // avoid \"expression has been changed\" error\n              setTimeout(() => {\n                // set first item active and input width\n                keyManager.setFirstItemActive();\n                this.updateInputWidth();\n\n                // set no entries found class on mat option\n                if (this.matOption) {\n                  if (this._noEntriesFound()) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                  } else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                  }\n                }\n\n                if (!this.disableScrollToActiveOnOptionsChanged) {\n                  this.adjustScrollTopToFitActiveOptionIntoView();\n                }\n\n              }, 1);\n\n            }\n          });\n      });\n\n    // detect changes when the input changes\n    this.change\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this.changeDetectorRef.detectChanges();\n      });\n\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect.panelOpen) {\n          this.updateInputWidth();\n        }\n      });\n\n    this.initMultipleHandling();\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.setOverlayClass();\n    });\n\n    // update view when available options change\n    this.matSelect.openedChange\n      .pipe(\n        take(1),\n        takeUntil(this._onDestroy)\n      ).subscribe(() => {\n        this.matSelect.options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            this.changeDetectorRef.markForCheck();\n          });\n      });\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event: KeyboardEvent) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n    if ((event.key && event.key.length === 1) ||\n      (event.keyCode >= A && event.keyCode <= Z) ||\n      (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n      (event.keyCode === SPACE)\n      || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))\n    ) {\n      event.stopPropagation();\n    }\n  }\n\n\n  writeValue(value: string) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this._value = value;\n      this.change.emit(value);\n    }\n  }\n\n  onInputChange(value) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this.initMultiSelectedValues();\n      this._value = value;\n      this.onChange(value);\n      this.change.emit(value);\n    }\n  }\n\n  onBlur(value: string) {\n    this.writeValue(value);\n    this.onTouched();\n  }\n\n  registerOnChange(fn: Function) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public _reset(focus?: boolean) {\n    if (!this.searchSelectInput) {\n      return;\n    }\n    this.searchSelectInput.nativeElement.value = '';\n    this.onInputChange('');\n    if (this.matOption && !focus) {\n      // remove no entries found class on mat option\n      this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n    }\n    if (focus) {\n      this._focus();\n    }\n  }\n\n  /**\n   * Sets the overlay class  to correct offsetY\n   * so that the selected option is at the position of the select box when opening\n   */\n  private setOverlayClass() {\n    if (this.overlayClassSet) {\n      return;\n    }\n    const overlayClasses: string[] = ['cdk-overlay-pane-select-search'];\n\n    if (!this.matOption) {\n      // add offset to panel if component is not placed inside mat-option\n      overlayClasses.push('cdk-overlay-pane-select-search-with-offset');\n    }\n\n    this.matSelect.overlayDir.attach\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        // note: this is hacky, but currently there is no better way to do this\n        let element: HTMLElement = this.searchSelectInput.nativeElement;\n        let overlayElement: HTMLElement;\n        while (element = element.parentElement) {\n          if (element.classList.contains('cdk-overlay-pane')) {\n            overlayElement = element;\n            break;\n          }\n        }\n        if (overlayElement) {\n          overlayClasses.forEach(overlayClass => {\n            overlayElement.classList.add(overlayClass);\n          });\n        }\n      });\n\n    this.overlayClassSet = true;\n  }\n\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  private initMultipleHandling() {\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.matSelect.valueChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe((values) => {\n        if (this.matSelect.multiple) {\n          let restoreSelectedValues = false;\n          if (this._value && this._value.length\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (values.indexOf(previousValue) === -1 && optionValues.indexOf(previousValue) === -1) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n\n          if (restoreSelectedValues) {\n            this.matSelect._onChange(values);\n          }\n\n          this.previousSelectedValues = values;\n        }\n      });\n  }\n\n  /**\n   * Scrolls the currently active option into the view if it is not yet visible.\n   */\n  private adjustScrollTopToFitActiveOptionIntoView(): void {\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\n      const matOptionHeight = this.getMatOptionHeight();\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n      // If the component is in a MatOption, the activeItemIndex will be offset by one.\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n      }\n    }\n  }\n\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  public updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\n    let panelElement: HTMLElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  private getMatOptionHeight(): number {\n    if (this.matSelect.options.length > 0) {\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n    }\n\n    return 0;\n  }\n\n  /**\n   *  Initialize this.previousSelectedValues once the first filtering occurs.\n   */\n  initMultiSelectedValues() {\n    if (this.matSelect.multiple && !this._value) {\n      this.previousSelectedValues = this.matSelect.options\n        .filter(option => option.selected)\n        .map(option => option.value);\n    }\n  }\n\n  /**\n   * Returns whether the \"no entries found\" message should be displayed\n   */\n  public _noEntriesFound(): boolean {\n    if (!this._options) {\n      return;\n    }\n    if (this.matOption) {\n      return this.noEntriesFoundLabel && this.value && this._options.length === 1;\n    } else {\n      return this.noEntriesFoundLabel && this.value && this._options.length === 0;\n    }\n  }\n\n}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport {MatButtonModule, MatInputModule, MatIconModule, MatProgressSpinnerModule} from '@angular/material';\nimport { CommonModule } from '@angular/common';\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\nexport const MatSelectSearchVersion = '1.7.5';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressSpinnerModule\n  ],\n  declarations: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ],\n  exports: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ]\n})\nexport class NgxMatSelectSearchModule { }\n"],"names":["Directive","EventEmitter","Subject","delay","takeUntil","take","A","Z","ZERO","NINE","SPACE","HOME","END","_countGroupLabelsBeforeOption","SELECT_PANEL_MAX_HEIGHT","Component","NG_VALUE_ACCESSOR","forwardRef","ChangeDetectionStrategy","MatSelect","Inject","ChangeDetectorRef","ViewportRuler","MatOption","Optional","Input","ViewChild","ElementRef","ContentChild","HostBinding","NgModule","CommonModule","MatButtonModule","MatIconModule","MatInputModule","MatProgressSpinnerModule"],"mappings":"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"}
