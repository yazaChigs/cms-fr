{"version":3,"file":"ngx-json-viewer.umd.min.js","sources":["~/ngx-json-viewer/src/ngx-json-viewer/ngx-json-viewer.component.ts","~/ngx-json-viewer/src/ngx-json-viewer.module.ts"],"sourcesContent":["import { Component, OnChanges, Input } from '@angular/core';\n\nexport interface Segment {\n  key: string;\n  value: any;\n  type: undefined | string;\n  description: string;\n  expanded: boolean;\n}\nexport class NgxJsonViewerComponent implements OnChanges {\n\n   json: any;\n   expanded = true;\n/**\n * @deprecated It will be always true and deleted in version 3.0.0\n */\ncleanOnChange = true;\n\n  segments: Segment[] = [];\n/**\n * @return {?}\n */\nngOnChanges() {\n    if (this.cleanOnChange) {\n      this.segments = [];\n    }\n\n    if (typeof this.json === 'object') {\n      Object.keys(this.json).forEach( key => {\n        this.segments.push(this.parseKeyValue(key, this.json[key]));\n      });\n    } else {\n      this.segments.push(this.parseKeyValue(`(${typeof this.json})`, this.json));\n    }\n  }\n/**\n * @param {?} segment\n * @return {?}\n */\nisExpandable(segment: Segment) {\n    return segment.type === 'object' || segment.type === 'array';\n  }\n/**\n * @param {?} segment\n * @return {?}\n */\ntoggle(segment: Segment) {\n    if (this.isExpandable(segment)) {\n      segment.expanded = !segment.expanded;\n    }\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nprivate parseKeyValue(key: any, value: any): Segment {\n    const /** @type {?} */ segment: Segment = {\n      key: key,\n      value: value,\n      type: undefined,\n      description: '' + value,\n      expanded: this.expanded\n    };\n\n    switch (typeof segment.value) {\n      case 'number': {\n        segment.type = 'number';\n        break;\n      }\n      case 'boolean': {\n        segment.type = 'boolean';\n        break;\n      }\n      case 'function': {\n        segment.type = 'function';\n        break;\n      }\n      case 'string': {\n        segment.type = 'string';\n        segment.description = '\"' + segment.value + '\"';\n        break;\n      }\n      case 'undefined': {\n        segment.type = 'undefined';\n        segment.description = 'undefined';\n        break;\n      }\n      case 'object': {\n        // yea, null is object\n        if (segment.value === null) {\n          segment.type = 'null';\n          segment.description = 'null';\n        } else if (Array.isArray(segment.value)) {\n          segment.type = 'array';\n          segment.description = 'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\n        } else if (segment.value instanceof Date) {\n          segment.type = 'date';\n        } else {\n          segment.type = 'object';\n          segment.description = 'Object ' + JSON.stringify(segment.value);\n        }\n        break;\n      }\n    }\n\n    return segment;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngx-json-viewer',\n  template: `\n    <section class=\"ngx-json-viewer\">\n      <section\n        *ngFor=\"let segment of segments\"\n        [ngClass]=\"['segment', 'segment-type-' + segment.type]\">\n        <section\n          (click)=\"toggle(segment)\"\n          [ngClass]=\"{\n            'segment-main': true,\n            'expandable': isExpandable(segment),\n            'expanded': segment.expanded\n          }\">\n          <div *ngIf=\"isExpandable(segment)\" class=\"toggler\"></div>\n          <span class=\"segment-key\">{{ segment.key }}</span>\n          <span class=\"segment-separator\">: </span>\n          <span *ngIf=\"!segment.expanded || !isExpandable(segment)\" class=\"segment-value\">{{ segment.description }}</span>\n        </section>\n        <section *ngIf=\"segment.expanded && isExpandable(segment)\" class=\"children\">\n          <ngx-json-viewer [json]=\"segment.value\" [expanded]=\"expanded\"></ngx-json-viewer>\n        </section>\n      </section>\n    </section>\n  `,\n  styles: [`\n    @charset \"UTF-8\";\n    .ngx-json-viewer {\n      font-family: monospace;\n      font-size: 1em;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      position: relative; }\n      .ngx-json-viewer .segment {\n        padding: 2px;\n        margin: 1px 1px 1px 12px; }\n        .ngx-json-viewer .segment .segment-main {\n          word-wrap: break-word; }\n          .ngx-json-viewer .segment .segment-main .toggler {\n            position: absolute;\n            margin-left: -14px;\n            margin-top: 3px;\n            font-size: .8em;\n            line-height: 1.2em;\n            vertical-align: middle;\n            color: #787878; }\n            .ngx-json-viewer .segment .segment-main .toggler::after {\n              display: inline-block;\n              content: \"â–º\";\n              -webkit-transition: -webkit-transform 0.1s ease-in;\n              transition: -webkit-transform 0.1s ease-in;\n              transition: transform 0.1s ease-in;\n              transition: transform 0.1s ease-in, -webkit-transform 0.1s ease-in; }\n          .ngx-json-viewer .segment .segment-main .segment-key {\n            color: #4E187C; }\n          .ngx-json-viewer .segment .segment-main .segment-separator {\n            color: #999; }\n          .ngx-json-viewer .segment .segment-main .segment-value {\n            color: #000; }\n        .ngx-json-viewer .segment .children {\n          margin-left: 12px; }\n      .ngx-json-viewer .segment-type-string > .segment-main > .segment-value {\n        color: #FF6B6B; }\n      .ngx-json-viewer .segment-type-number > .segment-main > .segment-value {\n        color: #009688; }\n      .ngx-json-viewer .segment-type-boolean > .segment-main > .segment-value {\n        color: #b938a4; }\n      .ngx-json-viewer .segment-type-date > .segment-main > .segment-value {\n        color: #05668D; }\n      .ngx-json-viewer .segment-type-array > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-object > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-function > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-null > .segment-main > .segment-value {\n        color: #fff; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-value {\n        color: #fff; }\n      .ngx-json-viewer .segment-type-null > .segment-main > .segment-value {\n        background-color: red; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-key {\n        color: #999; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-value {\n        background-color: #999; }\n      .ngx-json-viewer .segment-type-object > .segment-main,\n      .ngx-json-viewer .segment-type-array > .segment-main {\n        white-space: nowrap; }\n      .ngx-json-viewer .expanded > .toggler::after {\n        -webkit-transform: rotate(90deg);\n                transform: rotate(90deg); }\n      .ngx-json-viewer .expandable,\n      .ngx-json-viewer .expandable > .toggler {\n        cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'json': [{ type: Input },],\n'expanded': [{ type: Input },],\n'cleanOnChange': [{ type: Input },],\n};\n}\n\nfunction NgxJsonViewerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxJsonViewerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxJsonViewerComponent.ctorParameters;\n/** @type {?} */\nNgxJsonViewerComponent.propDecorators;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.json;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.expanded;\n/**\n * @deprecated It will be always true and deleted in version 3.0.0\n * @type {?}\n */\nNgxJsonViewerComponent.prototype.cleanOnChange;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.segments;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxJsonViewerComponent } from './ngx-json-viewer/ngx-json-viewer.component';\nexport class NgxJsonViewerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxJsonViewerComponent\n  ],\n  exports: [\n    NgxJsonViewerComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxJsonViewerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxJsonViewerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxJsonViewerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NgxJsonViewerComponent","this","expanded","cleanOnChange","segments","prototype","ngOnChanges","_this","json","Object","keys","forEach","key","push","parseKeyValue","isExpandable","segment","type","toggle","value","undefined","description","Array","isArray","length","JSON","stringify","Date","decorators","Component","args","selector","template","styles","ctorParameters","propDecorators","Input","NgxJsonViewerModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"qTASA,IAAAA,EAAA,WAAA,SAAAA,IAGGC,KAAHC,UAEc,EAEdD,KAAAE,eAEI,EAAFF,KAAFG,mBAIAJ,EAAAK,UAAAC,YAAA,WAAA,IAAAC,EAAAN,KACQA,KAAKE,gBACPF,KAAKG,aAGkB,iBAAdH,KAAKO,KACdC,OAAOC,KAAKT,KAAKO,MAAMG,QAAS,SAAAC,GAC9BL,EAAKH,SAASS,KAAKN,EAAKO,cAAcF,EAAKL,EAAKC,KAAKI,OAGvDX,KAAKG,SAASS,KAAKZ,KAAKa,cAAc,WAAWb,KAAKO,KAA5D,IAAqEP,KAAKO,QAO1ER,EAAAK,UAAAU,aAAA,SAHGC,GAIC,MAHwB,WAAjBA,EAAQC,MAAsC,UAAjBD,EAAQC,MAShDjB,EAAAK,UAAAa,OAAA,SANGF,GAOKf,KANKc,aAAaC,KAOpBA,EANQd,UAAWc,EAASd,WAI/BF,EAAHK,UAAAS,cAAG,SAAAF,EAAAO,GAWC,IAVMH,GAWJJ,IAVKA,EAWLO,MAVOA,EAWPF,KAVMG,UAWNC,YAVa,GAAKF,EAWlBjB,SAVUD,KAAKC,UAajB,cAVec,EAAQG,OAWrB,IAVK,SAWHH,EAVQC,KAAO,SAWf,MAEF,IAVK,UAWHD,EAVQC,KAAO,UAWf,MAEF,IAVK,WAWHD,EAVQC,KAAO,WAWf,MAEF,IAVK,SAWHD,EAVQC,KAAO,SAWfD,EAVQK,YAAc,IAAML,EAAQG,MAAQ,IAW5C,MAEF,IAVK,YAWHH,EAVQC,KAAO,YAWfD,EAVQK,YAAc,YAWtB,MAEF,IAVK,SAEmB,OAUlBL,EAVQG,OAWVH,EAVQC,KAAO,OAWfD,EAVQK,YAAc,QACjBC,MAAUC,QAAQP,EAAQG,QAW/BH,EAVQC,KAAO,QAWfD,EAVQK,YAAc,SAAWL,EAAQG,MAAMK,OAAS,KAAOC,KAAKC,UAAUV,EAAQG,QACjFH,EAAYG,iBAAiBQ,KAWlCX,EAVQC,KAAO,QAYfD,EAVQC,KAAO,SAWfD,EAVQK,YAAc,UAAYI,KAAKC,UAAUV,EAAQG,QAgB/D,OAVOH,KAvFX,GAyFOhB,EAAP4B,aACEX,KAAMY,EAAAA,UAAWC,OAWjBC,SAVU,kBAWVC,SAVU,i8BAiCVC,QAVQ,2kGA0ETjC,EAADkC,eAAC,WAAA,UAEMlC,EAAPmC,gBAaA3B,OAZWS,KAAMmB,EAAAA,QAajBlC,WAZee,KAAMmB,EAAAA,QAarBjC,gBAZoBc,KAAMmB,EAAAA,SCvM1B,IAAAC,EAAA,kBAAA,aAAA,GAE0CA,EAA1CT,aACEX,KAAMqB,EAAAA,SAAUR,OADhBS,SACEC,EAAAA,cAEFC,cACEzC,GAEF0C,SACE1C,OAOHqC,EAADH,eAAC,WAAA"}
