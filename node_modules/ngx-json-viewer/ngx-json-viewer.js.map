{"version":3,"file":"ngx-json-viewer.js","sources":["ts/ngx-json-viewer.ts","ts/src/ngx-json-viewer.module.ts","ts/src/ngx-json-viewer/ngx-json-viewer.component.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {NgxJsonViewerModule,NgxJsonViewerComponent} from './index';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxJsonViewerComponent } from './ngx-json-viewer/ngx-json-viewer.component';\nexport class NgxJsonViewerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxJsonViewerComponent\n  ],\n  exports: [\n    NgxJsonViewerComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxJsonViewerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxJsonViewerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxJsonViewerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnChanges, Input } from '@angular/core';\n\nexport interface Segment {\n  key: string;\n  value: any;\n  type: undefined | string;\n  description: string;\n  expanded: boolean;\n}\nexport class NgxJsonViewerComponent implements OnChanges {\n\n   json: any;\n   expanded = true;\n/**\n * @deprecated It will be always true and deleted in version 3.0.0\n */\ncleanOnChange = true;\n\n  segments: Segment[] = [];\n/**\n * @return {?}\n */\nngOnChanges() {\n    if (this.cleanOnChange) {\n      this.segments = [];\n    }\n\n    if (typeof this.json === 'object') {\n      Object.keys(this.json).forEach( key => {\n        this.segments.push(this.parseKeyValue(key, this.json[key]));\n      });\n    } else {\n      this.segments.push(this.parseKeyValue(`(${typeof this.json})`, this.json));\n    }\n  }\n/**\n * @param {?} segment\n * @return {?}\n */\nisExpandable(segment: Segment) {\n    return segment.type === 'object' || segment.type === 'array';\n  }\n/**\n * @param {?} segment\n * @return {?}\n */\ntoggle(segment: Segment) {\n    if (this.isExpandable(segment)) {\n      segment.expanded = !segment.expanded;\n    }\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nprivate parseKeyValue(key: any, value: any): Segment {\n    const /** @type {?} */ segment: Segment = {\n      key: key,\n      value: value,\n      type: undefined,\n      description: '' + value,\n      expanded: this.expanded\n    };\n\n    switch (typeof segment.value) {\n      case 'number': {\n        segment.type = 'number';\n        break;\n      }\n      case 'boolean': {\n        segment.type = 'boolean';\n        break;\n      }\n      case 'function': {\n        segment.type = 'function';\n        break;\n      }\n      case 'string': {\n        segment.type = 'string';\n        segment.description = '\"' + segment.value + '\"';\n        break;\n      }\n      case 'undefined': {\n        segment.type = 'undefined';\n        segment.description = 'undefined';\n        break;\n      }\n      case 'object': {\n        // yea, null is object\n        if (segment.value === null) {\n          segment.type = 'null';\n          segment.description = 'null';\n        } else if (Array.isArray(segment.value)) {\n          segment.type = 'array';\n          segment.description = 'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\n        } else if (segment.value instanceof Date) {\n          segment.type = 'date';\n        } else {\n          segment.type = 'object';\n          segment.description = 'Object ' + JSON.stringify(segment.value);\n        }\n        break;\n      }\n    }\n\n    return segment;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngx-json-viewer',\n  template: `\n    <section class=\"ngx-json-viewer\">\n      <section\n        *ngFor=\"let segment of segments\"\n        [ngClass]=\"['segment', 'segment-type-' + segment.type]\">\n        <section\n          (click)=\"toggle(segment)\"\n          [ngClass]=\"{\n            'segment-main': true,\n            'expandable': isExpandable(segment),\n            'expanded': segment.expanded\n          }\">\n          <div *ngIf=\"isExpandable(segment)\" class=\"toggler\"></div>\n          <span class=\"segment-key\">{{ segment.key }}</span>\n          <span class=\"segment-separator\">: </span>\n          <span *ngIf=\"!segment.expanded || !isExpandable(segment)\" class=\"segment-value\">{{ segment.description }}</span>\n        </section>\n        <section *ngIf=\"segment.expanded && isExpandable(segment)\" class=\"children\">\n          <ngx-json-viewer [json]=\"segment.value\" [expanded]=\"expanded\"></ngx-json-viewer>\n        </section>\n      </section>\n    </section>\n  `,\n  styles: [`\n    @charset \"UTF-8\";\n    .ngx-json-viewer {\n      font-family: monospace;\n      font-size: 1em;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      position: relative; }\n      .ngx-json-viewer .segment {\n        padding: 2px;\n        margin: 1px 1px 1px 12px; }\n        .ngx-json-viewer .segment .segment-main {\n          word-wrap: break-word; }\n          .ngx-json-viewer .segment .segment-main .toggler {\n            position: absolute;\n            margin-left: -14px;\n            margin-top: 3px;\n            font-size: .8em;\n            line-height: 1.2em;\n            vertical-align: middle;\n            color: #787878; }\n            .ngx-json-viewer .segment .segment-main .toggler::after {\n              display: inline-block;\n              content: \"â–º\";\n              -webkit-transition: -webkit-transform 0.1s ease-in;\n              transition: -webkit-transform 0.1s ease-in;\n              transition: transform 0.1s ease-in;\n              transition: transform 0.1s ease-in, -webkit-transform 0.1s ease-in; }\n          .ngx-json-viewer .segment .segment-main .segment-key {\n            color: #4E187C; }\n          .ngx-json-viewer .segment .segment-main .segment-separator {\n            color: #999; }\n          .ngx-json-viewer .segment .segment-main .segment-value {\n            color: #000; }\n        .ngx-json-viewer .segment .children {\n          margin-left: 12px; }\n      .ngx-json-viewer .segment-type-string > .segment-main > .segment-value {\n        color: #FF6B6B; }\n      .ngx-json-viewer .segment-type-number > .segment-main > .segment-value {\n        color: #009688; }\n      .ngx-json-viewer .segment-type-boolean > .segment-main > .segment-value {\n        color: #b938a4; }\n      .ngx-json-viewer .segment-type-date > .segment-main > .segment-value {\n        color: #05668D; }\n      .ngx-json-viewer .segment-type-array > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-object > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-function > .segment-main > .segment-value {\n        color: #999; }\n      .ngx-json-viewer .segment-type-null > .segment-main > .segment-value {\n        color: #fff; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-value {\n        color: #fff; }\n      .ngx-json-viewer .segment-type-null > .segment-main > .segment-value {\n        background-color: red; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-key {\n        color: #999; }\n      .ngx-json-viewer .segment-type-undefined > .segment-main > .segment-value {\n        background-color: #999; }\n      .ngx-json-viewer .segment-type-object > .segment-main,\n      .ngx-json-viewer .segment-type-array > .segment-main {\n        white-space: nowrap; }\n      .ngx-json-viewer .expanded > .toggler::after {\n        -webkit-transform: rotate(90deg);\n                transform: rotate(90deg); }\n      .ngx-json-viewer .expandable,\n      .ngx-json-viewer .expandable > .toggler {\n        cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'json': [{ type: Input },],\n'expanded': [{ type: Input },],\n'cleanOnChange': [{ type: Input },],\n};\n}\n\nfunction NgxJsonViewerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxJsonViewerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxJsonViewerComponent.ctorParameters;\n/** @type {?} */\nNgxJsonViewerComponent.propDecorators;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.json;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.expanded;\n/**\n * @deprecated It will be always true and deleted in version 3.0.0\n * @type {?}\n */\nNgxJsonViewerComponent.prototype.cleanOnChange;\n/** @type {?} */\nNgxJsonViewerComponent.prototype.segments;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}
